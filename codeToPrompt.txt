ini adalah kode sekarang:

templates\base.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Marmut</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body, .form-label, .btn {
            background-color: #121212; 
            color: #fff; 
        }
        h2 {
            color: #fff; 
        }
        .form-box {
            background-color: #333;
            padding: 20px;
            border-radius: 8px;
            border: 1px solid #444;
            box-shadow: 0 4px 8px rgba(0,0,0,0.5);
        }
        .btn-pink {
            background-color: #ff007f; 
            border-color: #ff007f;
        }
        .btn-pink:hover {
            background-color: #e60074;
            border-color: #cc0066;
        }
        .btn-cyan {
            background-color: #00ffff; 
            border-color: #00ffff;
        }
        .btn-cyan:hover {
            background-color: #00e5e5;
            border-color: #00cccc;
        }
        .form-control {
            background-color: #222;
            border: 1px solid #555;
            color: #fff;
        }
        .form-control:focus {
            box-shadow: 0 0 0 0.25rem rgba(0, 255, 255, 0.25);
            border-color: #00ffff;
        }
    </style>
</head>
<body>
    {% include 'navbar_user.html' %}

    <div class="container mt-4">
        {% block content %}{% endblock %}
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


templates\navbar_guest.html:
<nav class="navbar navbar-expand-md navbar-dark bg-dark-custom">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">Marmut</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse" aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarCollapse">
            <ul class="navbar-nav me-auto mb-2 mb-md-0">
                <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="#">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Pricing</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'playlist_list' %}">Kelola Playlist</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'langganan_paket' %}">Langganan Paket</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'song_list' %}">Daftar Lagu</a>
                </li>
                <li>
                    <form class="d-flex" action="{% url 'main:search' %}" method="get">
                        <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search" name="query">
                        <button class="btn btn-outline-success" type="submit">Search</button>
                    </form>
                </li>                
            </ul>
            <form class="d-flex">
                <a href="{% url 'main:login' %}" class="btn btn-pink me-2" type="submit">Login</a>
                <a href="{% url 'main:register' %}" class="btn btn-cyan" type="submit">Register</a>
            </form>
        </div>
    </div>
</nav>


templates\navbar_user.html:
<nav class="navbar navbar-expand-md navbar-dark bg-dark-custom">
    <div class="container-fluid">
        <a class="navbar-brand" href="{% url 'main:home' %}">Mahmud</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse" aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarCollapse">
            <ul class="navbar-nav me-auto mb-2 mb-md-0">
                {% if user_type != 'guest' %}
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'main:dashboard' %}">Dashboard</a>
                    </li>
                    {% if user_type == 'user' or user_type == 'artist' or user_type == 'songwriter' or user_type == 'podcaster' %}
                        <li class="nav-item">
                            <a class="nav-link" href="#">Chart</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">Kelola Playlist</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'langganan:langganan_paket' %}">Langganan Paket</a>
                        </li>
                        
                    {% endif %}
                    {% if user_type == 'premium' %}
                        <li class="nav-item">
                            <a class="nav-link" href="#">Kelola Downloaded Songs</a>
                        </li>
                    {% endif %}
                    {% if user_type == 'podcaster' %}
                        <li class="nav-item">
                            <a class="nav-link" href="#">Kelola Podcast</a>
                        </li>
                    {% endif %}
                    {% if user_type == 'artist' or user_type == 'songwriter' %}
                        <li class="nav-item">
                            <a class="nav-link" href="#">Kelola Album & Songs</a>
                        </li>
                    {% endif %}
                    {% if user_type == 'label' %}
                        <li class="nav-item">
                            <a class="nav-link" href="#">Kelola Album</a>
                        </li>
                    {% endif %}
                    {% if user_type == 'artist' or user_type == 'songwriter' or user_type == 'label' %}
                        <li class="nav-item">
                            <a class="nav-link" href="#">Cek Royalti</a>
                        </li>
                    {% endif %}
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'main:logout' %}">Logout</a>
                    </li>
                {% else %}
                    <li class="nav-item">
                        <a class="nav-link active" href="{% url 'main:home' %}">Home</a>
                    </li>
                {% endif %}
            </ul>
            <form class="d-flex" action="{% url 'main:search' %}" method="get">
                <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search" name="query">
                <button class="btn btn-outline-success" type="submit">Search</button>
            </form>
            {% if user_type == 'guest' %}
                <form class="d-flex">
                    <button class="btn btn-pink me-2" type="button" onclick="location.href='{% url 'main:login' %}'">Login</button>
                    <button class="btn btn-cyan" type="button" onclick="location.href='{% url 'main:register' %}'">Register</button>
                </form>
            {% endif %}
        </div>
    </div>
</nav>



templates\search_results.html:
{% extends 'base.html' %}

{% block content %}
<h2>Hasil Pencarian "{{ query }}"</h2>

{% if results %}
    <table class="table table-dark">
        <thead>
            <tr>
                <th>Tipe</th>
                <th>Judul</th>
                <th>Oleh</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for result in results %}
                <tr>
                    <td>{{ result.type }}</td>
                    <td>{{ result.title }}</td>
                    <td>{{ result.by }}</td>
                    <td>
                        <a href="{{ result.url }}" class="btn btn-sm btn-info">Lihat</a>
                    </td>
                </tr>
            {% endfor %}
        </tbody>
    </table>
{% else %}
    <p>Maaf, pencarian untuk "{{ query }}" tidak ditemukan</p>
{% endif %}
{% endblock %}


connector\query.py:
from collections import namedtuple
import psycopg2
from psycopg2 import Error
from psycopg2.extras import RealDictCursor
from django.http import HttpRequest  # for the 'request' parameter


try:
    connection = psycopg2.connect(user="postgres.tutzylpjrcjropovgoly",
                        password="eqRvUiBE4LZlukUp",
                        host="aws-0-ap-southeast-1.pooler.supabase.com",
                        port="5432",
                        database="postgres")

    # Create a cursor to perform database operations
    connection.autocommit = True
    cursor = connection.cursor()
except (Exception, Error) as error:
    print("Error while connecting to PostgreSQL", error)


def map_cursor(cursor):
    "Return all rows from a cursor as a namedtuple"
    desc = cursor.description
    nt_result = namedtuple("Result", [col[0] for col in desc])
    return [dict(row) for row in cursor.fetchall()]

def query(query_str: str):
    hasil = []
    with connection.cursor(cursor_factory=RealDictCursor) as cursor:
        cursor.execute("SET SEARCH_PATH TO PUBLIC")
        try:
            cursor.execute(query_str)
            if query_str.strip().upper().startswith("SELECT"):
                hasil = map_cursor(cursor)
            else:
                hasil = cursor.rowcount
                connection.commit()
        except Exception as e:
            hasil = "error :\n" + str(e)
    return hasil

def get_session_info(request):
    session_id = request.COOKIES.get('session_id')
    if session_id:
        user = query(f"SELECT * FROM SESSIONS WHERE session_id = '{session_id}'")
        if user:
            return user[0]
    return None


langganan\admin.py:
from django.contrib import admin

# Register your models here.



langganan\apps.py:
from django.apps import AppConfig


class LanggananConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'langganan'



langganan\models.py:
from django.db import models
from django.contrib.auth.models import User

class Paket(models.Model):
    jenis = models.CharField(max_length=50, primary_key=True)
    harga = models.IntegerField()

class Transaction(models.Model):
    id = models.BigAutoField(primary_key=True)
    jenis_paket = models.ForeignKey(Paket, on_delete=models.CASCADE)
    email = models.ForeignKey(User, on_delete=models.CASCADE)
    timestamp_dimulai = models.DateTimeField()
    timestamp_berakhir = models.DateTimeField()
    metode_bayar = models.CharField(max_length=50)
    nominal = models.IntegerField()



langganan\tests.py:
from django.test import TestCase

# Create your tests here.



langganan\urls.py:
from django.urls import path
from . import views

app_name = 'langganan'

urlpatterns = [
    path('langganan_paket/', views.langganan_paket, name='langganan_paket'),
    path('riwayat_transaksi/', views.riwayat_transaksi, name='riwayat_transaksi'),
    path('pembayaran_paket/<str:jenis>/', views.pembayaran_paket, name='pembayaran_paket'),
]


langganan\views.py:
import uuid
from django.shortcuts import render, redirect
from django.urls import reverse
from django.utils import timezone
from .models import Paket, Transaction
from connector.query import query, get_session_info

def langganan_paket(request):
    ses_info = get_session_info(request)
    if not ses_info:
        return redirect('main:login')
    
    paket_list = query("SELECT * FROM PAKET")
    context = {'paket_list': paket_list}
    return render(request, 'langganan/langganan_paket.html', context)

def riwayat_transaksi(request):
    ses_info = get_session_info(request)
    if not ses_info:
        return redirect('main:login')
    
    email = ses_info['email']
    transaksi_list = query(f"""
        SELECT t.id, p.jenis, t.timestamp_dimulai, t.timestamp_berakhir, t.metode_bayar, t.nominal
        FROM TRANSACTION t
        JOIN PAKET p ON t.jenis_paket = p.jenis
        WHERE t.email = '{email}'
        ORDER BY t.timestamp_dimulai DESC
    """)
    
    context = {'transaksi_list': transaksi_list}
    return render(request, 'langganan/riwayat_transaksi.html', context)

def pembayaran_paket(request, jenis):
    ses_info = get_session_info(request)
    if not ses_info:
        return redirect('main:login')
    
    email = ses_info['email']
    
    if request.method == 'POST':
        metode_bayar = request.POST.get('metode_bayar')
        paket = query(f"SELECT * FROM PAKET WHERE jenis = '{jenis}'")
        if not paket:
            return redirect('langganan:langganan_paket')
        paket = paket[0]
        
        # Check for existing active subscription
        active_subscription = query(f"SELECT * FROM TRANSACTION WHERE email = '{email}' AND timestamp_berakhir > NOW()")
        if active_subscription:
            return render(request, 'langganan/langganan_paket.html', {'error': 'You already have an active subscription.'})
        
        # Create new transaction
        timestamp_dimulai = timezone.now()
        timestamp_berakhir = timestamp_dimulai + timezone.timedelta(days=int(paket['jenis'].split()[0]) * 30)
        transaction_id = str(uuid.uuid4())  # Generate a unique transaction ID
        
        query(f"""
            INSERT INTO TRANSACTION (id, jenis_paket, email, timestamp_dimulai, timestamp_berakhir, metode_bayar, nominal)
            VALUES ('{transaction_id}', '{jenis}', '{email}', '{timestamp_dimulai}', '{timestamp_berakhir}', '{metode_bayar}', {paket['harga']})
        """)
        
        # Update user to premium
        query(f"DELETE FROM NONPREMIUM WHERE email = '{email}'")
        query(f"INSERT INTO PREMIUM (email) VALUES ('{email}')")
        
        return redirect('langganan:riwayat_transaksi')
    else:
        paket = query(f"SELECT * FROM PAKET WHERE jenis = '{jenis}'")
        if not paket:
            return redirect('langganan:langganan_paket')
        paket = paket[0]
        context = {'paket': paket}
        return render(request, 'langganan/pembayaran_paket.html', context)


langganan\__init__.py:



langganan\templates\langganan\langganan_paket.html:
{% extends 'base.html' %}

{% block content %}
<h2>Langganan Paket</h2>
{% if error %}
    <div class="alert alert-danger" role="alert">
        {{ error }}
    </div>
{% endif %}
<table class="table table-dark">
    <thead>
        <tr>
            <th>Jenis</th>
            <th>Harga</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        {% for paket in paket_list %}
        <tr>
            <td>{{ paket.jenis }}</td>
            <td>{{ paket.harga }}</td>
            <td><a href="{% url 'langganan:pembayaran_paket' paket.jenis %}" class="btn btn-info">Berlangganan</a></td>
        </tr>
        {% endfor %}
    </tbody>
</table>
<a href="{% url 'langganan:riwayat_transaksi' %}" class="btn btn-secondary">Riwayat Transaksi</a>
{% endblock %}



langganan\templates\langganan\pembayaran_paket.html:
{% extends 'base.html' %}

{% block content %}
<h2>Pembayaran Paket</h2>
<p>Informasi Paket yang Ingin Dibeli:</p>
<table>
    <tr>
        <th>Jenis</th>
        <th>Harga</th>
    </tr>
    <tr>
        <td>{{ paket.jenis }}</td>
        <td>{{ paket.harga }}</td>
    </tr>
</table>
<form method="POST">
    {% csrf_token %}
    <label for="metode_bayar">Metode Pembayaran:</label>
    <select name="metode_bayar" id="metode_bayar">
        <option value="transfer_bank">Transfer Bank</option>
        <option value="kartu_kredit">Kartu Kredit</option>
        <option value="e_wallet">E-Wallet</option>
    </select>
    <br>
    <input type="submit" value="Submit">
</form>
{% endblock %}



langganan\templates\langganan\riwayat_transaksi.html:
{% extends 'base.html' %}

{% block content %}
<h2>Riwayat Transaksi Paket</h2>
<table>
    <tr>
        <th>Jenis</th>
        <th>Tanggal Dimulai</th>
        <th>Tanggal Berakhir</th>
        <th>Metode Pembayaran</th>
        <th>Nominal</th>
    </tr>
    {% for transaksi in transaksi_list %}
    <tr>
        <td>{{ transaksi.jenis_paket.jenis }}</td>
        <td>{{ transaksi.timestamp_dimulai }}</td>
        <td>{{ transaksi.timestamp_berakhir }}</td>
        <td>{{ transaksi.metode_bayar }}</td>
        <td>{{ transaksi.nominal }}</td>
    </tr>
    {% endfor %}
</table>
<a href="{% url 'langganan:langganan_paket' %}">Kembali</a>
{% endblock %}



song\admin.py:
from django.contrib import admin

# Register your models here.



song\apps.py:
from django.apps import AppConfig


class SongConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'song'



song\models.py:
from django.db import models
from django.contrib.auth.models import User

class Song(models.Model):
    title = models.CharField(max_length=100)
    genre = models.CharField(max_length=100)
    artist = models.CharField(max_length=100)
    songwriter = models.CharField(max_length=100)
    duration = models.IntegerField()
    release_date = models.DateField()
    year = models.IntegerField()
    total_play = models.IntegerField(default=0)
    total_download = models.IntegerField(default=0)
    album = models.CharField(max_length=100)

    def __str__(self):
        return self.title

class AkunPlaySong(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    song = models.ForeignKey(Song, on_delete=models.CASCADE)
    timestamp = models.DateTimeField(auto_now_add=True)

class DownloadedSong(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    song = models.ForeignKey(Song, on_delete=models.CASCADE)
    timestamp = models.DateTimeField(auto_now_add=True)



song\tests.py:
from django.test import TestCase

# Create your tests here.



song\urls.py:
from django.urls import path
from . import views

urlpatterns = [
    path('', views.song_list, name='song_list'),
    path('<int:song_id>/', views.song_detail, name='song_detail'),
    path('<int:song_id>/play/', views.play_song, name='play_song'),
    path('<int:song_id>/add-to-playlist/', views.add_to_playlist, name='add_to_playlist'),
    path('<int:song_id>/download/', views.download_song, name='download_song'),
    path('downloaded/', views.downloaded_songs, name='downloaded_songs'),
    path('search/', views.search, name='search'),
]



song\views.py:
from django.shortcuts import render, redirect, get_object_or_404
from django.urls import reverse
from django.contrib import messages
from django.utils import timezone
from .models import Song, AkunPlaySong, DownloadedSong
from playlist.models import Playlist, UserPlaylist
from connector.query import query, get_session_info

def song_list(request):
    songs = Song.objects.all()
    return render(request, 'song/song_list.html', {'songs': songs})

def song_detail(request, song_id):
    ses_info = get_session_info(request)
    if not ses_info:
        return redirect('main:login')
    
    song = get_object_or_404(Song, id=song_id)
    is_premium = ses_info.get('is_premium', False)
    user_email = ses_info['email']

    if request.method == 'POST':
        if 'play' in request.POST:
            progress = int(request.POST.get('progress', 0))
            if progress > 70:
                song.total_play += 1
                song.save()
                AkunPlaySong.objects.create(email_pemain=user_email, id_song=song_id, waktu=timezone.now())
        
        elif 'add_to_playlist' in request.POST:
            playlist_id = request.POST.get('playlist')
            playlist = get_object_or_404(Playlist, id=playlist_id)
            if UserPlaylist.objects.filter(id_user_playlist=playlist_id, id_song=song_id).exists():
                message = f"Lagu dengan judul '{song.title}' sudah ditambahkan di '{playlist.title}'!"
            else:
                UserPlaylist.objects.create(id_user_playlist=playlist_id, id_song=song_id)
                message = f"Berhasil menambahkan Lagu dengan judul '{song.title}' ke '{playlist.title}'!"
            return render(request, 'song/song_detail.html', {'song': song, 'is_premium': is_premium, 'message': message})
        
        elif 'download' in request.POST:
            if is_premium:
                if DownloadedSong.objects.filter(email_downloader=user_email, id_song=song_id).exists():
                    message = f"Lagu dengan judul '{song.title}' sudah pernah di unduh!"
                else:
                    DownloadedSong.objects.create(email_downloader=user_email, id_song=song_id)
                    song.total_download += 1
                    song.save()
                    message = f"Berhasil mengunduh Lagu dengan judul '{song.title}'!"
                return render(request, 'song/song_detail.html', {'song': song, 'is_premium': is_premium, 'message': message})
    
    playlists = Playlist.objects.filter(email_pembuat=user_email)
    return render(request, 'song/song_detail.html', {'song': song, 'is_premium': is_premium, 'playlists': playlists})

def play_song(request, song_id):
    ses_info = get_session_info(request)
    if not ses_info:
        return redirect('main:login')
    
    song = get_object_or_404(Song, id=song_id)
    progress = int(request.POST.get('progress', 0))
    user_email = ses_info['email']
    if progress > 70:
        song.total_play += 1
        song.save()
        AkunPlaySong.objects.create(email_pemain=user_email, id_song=song_id)
    return JsonResponse({'status': 'success'})

def add_to_playlist(request, song_id):
    ses_info = get_session_info(request)
    if not ses_info:
        return redirect('main:login')
    
    song = get_object_or_404(Song, id=song_id)
    user_email = ses_info['email']
    if request.method == 'POST':
        playlist_id = request.POST.get('playlist')
        playlist = get_object_or_404(Playlist, id=playlist_id)
        UserPlaylist.objects.create(id_user_playlist=playlist_id, id_song=song_id)
        return render(request, 'song/message.html', {
            'message': f"Berhasil menambahkan Lagu dengan judul '{song.title}' ke '{playlist.name}'!",
            'playlist_url': reverse('playlist_detail', args=[playlist_id]),
            'song_id': song_id,
        })
    playlists = Playlist.objects.filter(email_pembuat=user_email)
    return render(request, 'song/add_to_playlist.html', {'song': song, 'playlists': playlists})

def download_song(request, song_id):
    ses_info = get_session_info(request)
    if not ses_info:
        return redirect('main:login')
    
    song = get_object_or_404(Song, id=song_id)
    user_email = ses_info['email']
    if ses_info.get('is_premium', False):
        song.total_download += 1
        song.save()
        DownloadedSong.objects.create(email_downloader=user_email, id_song=song_id)
        return render(request, 'song/message.html', {
            'message': f"Berhasil mengunduh Lagu dengan judul '{song.title}'!",
            'playlist_url': reverse('downloaded_songs'),
            'song_id': song_id,
        })
    return redirect('song_detail', song_id=song_id)

def downloaded_songs(request):
    ses_info = get_session_info(request)
    if not ses_info:
        return redirect('main:login')
    
    user_email = ses_info['email']
    downloaded_songs = DownloadedSong.objects.filter(email_downloader=user_email).order_by('-timestamp')
    
    if request.method == 'POST':
        song_id = request.POST.get('song_id')
        song = get_object_or_404(Song, id=song_id)
        downloaded_song = get_object_or_404(DownloadedSong, email_downloader=user_email, id_song=song_id)
        downloaded_song.delete()
        song.total_download -= 1
        song.save()
        messages.success(request, f"Berhasil menghapus Lagu dengan judul '{song.title}' dari daftar unduhan!")
        return redirect('downloaded_songs')
    
    return render(request, 'song/downloaded_songs.html', {'downloaded_songs': downloaded_songs})

def search(request):
    query_str = request.GET.get('query')
    
    if query_str:
        songs = Song.objects.filter(title__icontains=query_str)
        podcasts = Podcast.objects.filter(title__icontains=query_str)
        user_playlists = UserPlaylist.objects.filter(title__icontains=query_str)
        
        results = []
        for song in songs:
            results.append({
                'type': 'SONG',
                'title': song.title,
                'by': song.artist,
                'url': reverse('song_detail', args=[song.id])
            })
        for podcast in podcasts:
            results.append({
                'type': 'PODCAST',
                'title': podcast.title,
                'by': podcast.podcaster,
                'url': reverse('podcast_detail', args=[podcast.id])
            })
        for playlist in user_playlists:
            results.append({
                'type': 'USER PLAYLIST',
                'title': playlist.title,
                'by': playlist.user.username,
                'url': reverse('playlist_detail', args=[playlist.id])
            })
    else:
        results = []
    
    context = {
        'query': query_str,
        'results': results
    }
    return render(request, 'main/search_results.html', context)



song\__init__.py:



main\admin.py:
from django.contrib import admin

# Register your models here.



main\apps.py:
from django.apps import AppConfig


class MainConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "main"



main\forms.py:



main\lmao.py:
from collections import namedtuple
import psycopg2
from psycopg2 import Error
from psycopg2.extras import RealDictCursor



try:
    connection = psycopg2.connect(user="postgres.tutzylpjrcjropovgoly",
                        password="eqRvUiBE4LZlukUp",
                        host="aws-0-ap-southeast-1.pooler.supabase.com",
                        port="5432",
                        database="postgres")

    # Create a cursor to perform database operations
    connection.autocommit = True
    cursor = connection.cursor()
except (Exception, Error) as error:
    print("Error while connecting to PostgreSQL", error)


def map_cursor(cursor):
    "Return all rows from a cursor as a namedtuple"
    desc = cursor.description
    nt_result = namedtuple("Result", [col[0] for col in desc])
    return [dict(row) for row in cursor.fetchall()]


def query(query_str: str):
    hasil = []
    with connection.cursor(cursor_factory=RealDictCursor) as cursor:
        cursor.execute("SET SEARCH_PATH TO PUBLIC")
        try:
            cursor.execute(query_str)

            if query_str.strip().upper().startswith("SELECT"):
                # Kalau ga error, return hasil SELECT
                hasil = map_cursor(cursor)
            else:
                # Kalau ga error, return jumlah row yang termodifikasi oleh INSERT, UPDATE, DELETE
                hasil = cursor.rowcount
                connection.commit()
        except Exception as e:
            # Ga tau error apa
            hasil = "error :\n" + str(e)

    return hasil

email = "ganjar@pranowo.com"
email_exists = query(f"SELECT * FROM AKUN WHERE email = '{email}' UNION SELECT * FROM LABEL WHERE email = '{email}'")
if email_exists:
    print("Email belum terdaftar")
else:
    print("Email sudah terdaftar")


main\models.py:
from django.db import models
from django.contrib.auth.models import User

class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    birth_date = models.DateField()
    city = models.CharField(max_length=100)
    is_artist = models.BooleanField(default=False)
    is_songwriter = models.BooleanField(default=False)
    is_podcaster = models.BooleanField(default=False)

    def __str__(self):
        return self.user.username

class LabelProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    contact = models.CharField(max_length=100)

    def __str__(self):
        return self.user.username



main\tests.py:
from django.test import TestCase, Client

class mainTest(TestCase):
    def test_main_url_is_exist(self):
        response = Client().get('/main/')
        self.assertEqual(response.status_code, 200)

    def test_main_using_main_template(self):
        response = Client().get('/main/')
        self.assertTemplateUsed(response, 'main.html')


main\urls.py:
from django.urls import path
from main.views import show_main
from main.views import show_main,  play_song, play_user_playlist, register_user, register_label, home, login_and_register
from main.views import register , dashboard
from main.views import login_user
from main.views import logout_user
from main.views import search
from main.views import createpod
from .views import createpodepisode
from main.views import seechart
from main.views import daily
from main.views import weekly
from main.views import monthly
from main.views import yearly
from main.views import podetail

app_name = 'main'

urlpatterns = [
    path('', show_main, name='show_main'),
    path('register/', register, name='register'),
    path('login/', login_user, name='login'),
    path('logout/', logout_user, name='logout'),
    path('search/', search, name='search'),
    path('play-song/', play_song, name='play_song'),
    path('play-user-playlist/', play_user_playlist, name='play_user_playlist'),
    path('createpod.html/', createpod, name='createpod'),
    path('createpod.html/createpod_episode.html/', createpodepisode, name='createpodepisode'),
    path('podetail.html/', podetail, name='podetail'),
    path('seechart.html/', seechart, name='seechart'),
    path('seechart.html/daily.html', daily, name='daily'),
    path('seechart.html/weekly.html', weekly, name='weekly'),
    path('seechart.html/monthly.html', monthly, name='monthly'),
    path('seechart.html/yearly.html', yearly, name='yearly'),
    path('register/user/', register_user, name='register_user'),
    path('register/label/', register_label, name='register_label'),
    path('home/', home, name='home'),
    path('login_and_register/', login_and_register, name='login_and_register'),
    path('dashboard/', dashboard, name='dashboard'),
]


main\views.py:
from django.shortcuts import render
from django.http import HttpResponseNotFound, HttpResponseRedirect
from django.urls import reverse
from django.http import HttpResponse
from django.core import serializers
from django.shortcuts import redirect
from django.contrib.auth.forms import UserCreationForm
from django.contrib import messages  
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
import datetime
from django.http import HttpResponseRedirect
from django.urls import reverse
from django.views.decorators.csrf import csrf_exempt
from playlist.models import Song, UserPlaylist
from django.shortcuts import render, redirect
from django.contrib.auth.models import User
from django.contrib.auth import login
from .models import UserProfile, LabelProfile
from django.contrib.auth.hashers import make_password
from django.contrib.auth.models import User
from connector.query import query, get_session_info
import uuid
from django.http import HttpResponseRedirect
from django.urls import reverse


def get_user_type(user):
    try:
        user_profile = user.userprofile
        if user_profile.is_artist:
            return 'artist'
        elif user_profile.is_songwriter:
            return 'songwriter'
        elif user_profile.is_podcaster:
            return 'podcaster'
        else:
            return 'user'
    except UserProfile.DoesNotExist:
        try:
            label_profile = user.labelprofile
            return 'label'
        except LabelProfile.DoesNotExist:
            return 'guest'

def show_main(request):
    return redirect('main:login_and_register')


def register_user(request):
    if request.method == 'POST':
        email = request.POST.get('email')
        password = request.POST.get('password')
        name = request.POST.get('name')
        gender = 1 if request.POST.get('gender') == "male" else 0
        birth_place = request.POST.get('birthplace')
        birth_date = request.POST.get('birthdate')
        city = request.POST.get('city')
        is_artist = 'True' in request.POST.get('is_artist')
        is_songwriter = 'True' in request.POST.get('is_songwriter')
        is_podcaster = 'True' in request.POST.get('is_podcaster')
        
        #CEK APAKAH EMAIL SUDAH TERDAFTAR
        email_exists = query(f"SELECT * FROM AKUN WHERE email = '{email}' UNION SELECT * FROM LABEL WHERE email = '{email}'")
        if len(email_exists)!=0:
            messages.error(request, 'Email already registered!')
            return redirect('main:register_label')
        
        is_verified = is_artist or is_songwriter or is_podcaster 
        pemilik_hak_cipta_id = str(uuid.uuid4())

        query_string = f"""
                INSERT INTO AKUN (email, password, nama, gender, tempat_lahir, tanggal_lahir, is_verified, kota_asal)
                VALUES ('{email}', '{password}', '{name}', {gender}, '{birth_place}', '{birth_date}', {is_verified}, '{city}');
            """

        query_string += f"""
            INSERT INTO NONPREMIUM (email) VALUES ('{email}');
        """
        
        if is_podcaster:
            query_string += f"""
                INSERT INTO PODCASTER (email)
                VALUES ('{email}');
            """
        
        if is_artist or is_songwriter:
            # Insert pemilik hak cipta
            rate_royalti = 0
            query_string += f"""
                INSERT INTO PEMILIK_HAK_CIPTA (id, rate_royalti)
                VALUES ('{pemilik_hak_cipta_id}', {rate_royalti});
            """

        if is_artist:
            artist_uuid = str(uuid.uuid4())
            
            # Insert artist
            query_string += f"""
                INSERT INTO ARTIST (id, email_akun, id_pemilik_hak_cipta)
                VALUES ('{artist_uuid}', '{email}', '{pemilik_hak_cipta_id}');
            """
            
        if is_songwriter:
            songwriter_uuid = str(uuid.uuid4())
            
            
            query_string += f"""
                INSERT INTO SONGWRITER (id, email_akun, id_pemilik_hak_cipta)
                VALUES ('{songwriter_uuid}', '{email}', '{pemilik_hak_cipta_id}');
            """

        res = query(query_string)

        
        if "error" in str(res):
            messages.error(request, 'An error occurred while registering your account. Please try again later.')
            print(res)
        else:
            messages.success(request, 'Registration successful!')
            return redirect('main:login')  

    return render(request, 'register_user.html')

def register_label(request):
    if request.method == 'POST':
        email = request.POST.get('email')
        password = request.POST.get('password')
        contact = request.POST.get('contact')
        name = request.POST.get('name')
        label_uuid = str(uuid.uuid4())
        pemilik_hak_cipta_id = str(uuid.uuid4())
        
        #CEK APAKAH EMAIL SUDAH TERDAFTAR
        email_exists = query(f"SELECT * FROM AKUN WHERE email = '{email}' UNION SELECT * FROM LABEL WHERE email = '{email}'")
        if len(email_exists)!=0:
            messages.error(request, 'Email already registered!')
            return redirect('main:register_label')
        

        # Insert pemilik hak cipta
        rate_royalti = 0
        query_string = f"""
            INSERT INTO PEMILIK_HAK_CIPTA (id, rate_royalti)
            VALUES ('{pemilik_hak_cipta_id}', {rate_royalti});
        """

        # Insert label
        query_string += f"""
                INSERT INTO label (id, nama, email, password, kontak, id_pemilik_hak_cipta) VALUES
                ('{label_uuid}', '{name}', '{email}', '{password}', '{contact}', '{pemilik_hak_cipta_id}');
        """

        res = query(query_string)

        if "error" in str(res):
            messages.error(request, 'An error occurred while registering your account. Please try again later.')
            print(res)
        else:
            messages.success(request, 'Registration successful!')
            return redirect('main:login')  # Redirect to a home or profile page

    return render(request, 'register_label.html')

def register(request):
    # Simply render the choice page without any logic for POST methods
    return render(request, 'register.html')

def login_and_register(request):
    return render(request, 'login_and_register.html')

def login_user(request):
    if request.method == 'POST':
        email = request.POST.get('email')
        password = request.POST.get('password')
        user = query(f"SELECT * FROM AKUN WHERE email = '{email}' AND password = '{password}' UNION SELECT * FROM LABEL WHERE email = '{email}' AND password = '{password}'")
        if len(user) == 0:
            messages.error(request, 'Invalid email or password!')
        else:
            is_artist = len(query(f"SELECT * FROM ARTIST WHERE email_akun = '{email}'")) != 0
            is_songwriter = len(query(f"SELECT * FROM SONGWRITER WHERE email_akun = '{email}'")) != 0
            is_podcaster = len(query(f"SELECT * FROM PODCASTER WHERE email = '{email}'")) != 0
            is_premium = len(query(f"SELECT * FROM PREMIUM WHERE email = '{email}'")) != 0
            is_label = len(query(f"SELECT * FROM LABEL WHERE email = '{email}'")) != 0

            session_id = str(uuid.uuid4())
            temp = query(f"""INSERT INTO SESSIONS (session_id, email, is_label, is_premium, is_artist, is_songwriter, is_podcaster) 
                            VALUES ('{session_id}', '{email}', {is_label}, {is_premium}, {is_artist}, {is_songwriter}, {is_podcaster})
                        """)

            response = redirect('main:dashboard')
            response.set_cookie('session_id', session_id)
            return response

    return render(request, 'login.html')


def logout_user(request):
    session_id = request.COOKIES.get('session_id')
    if session_id:
        query(f"DELETE FROM SESSIONS WHERE session_id = '{session_id}'")  # Delete session from database


    response = HttpResponseRedirect(reverse('main:login'))
    response.delete_cookie('session_id')  # Delete session_id cookie
    return response


def play_song(request):
    song_data = {
        'title': 'Blinding Lights',
        'genres': ['Pop', 'Synthwave'],
        'artist': 'The Weeknd',
        'songwriters': ['Abel Tesfaye', 'Ahmad Balshe', 'Jason Quenneville', 'Max Martin', 'Oscar Holter'],
        'duration': 3.22,  
        'release_date': '29/11/2019',
        'year': 2019,
        'album': 'After Hours',
        'total_plays': 2_700_000_000,  
        'total_downloads': 1_000_000  
    }

    return render(request, 'play_song.html', {'song': song_data, 'user': request.user, 'user_is_premium': True})


def play_user_playlist(request):
    songs_data = [
        {'id': 1, 'title': 'Shape of You', 'artist': 'Ed Sheeran', 'duration': '3 minutes 53 seconds', 'play_count': 0},
        {'id': 2, 'title': 'Blinding Lights', 'artist': 'The Weeknd', 'duration': '3 minutes 20 seconds', 'play_count': 0},
        {'id': 3, 'title': 'Rolling in the Deep', 'artist': 'Adele', 'duration': '3 minutes 48 seconds', 'play_count': 0},
        {'id': 4, 'title': 'Bad Guy', 'artist': 'Billie Eilish', 'duration': '3 minutes 14 seconds', 'play_count': 0},
        {'id': 5, 'title': 'Thriller', 'artist': 'Michael Jackson', 'duration': '5 minutes 57 seconds', 'play_count': 0}
    ]

    
    total_seconds = sum(int(song['duration'].split()[0]) * 60 + int(song['duration'].split()[2]) for song in songs_data)
    total_hours = total_seconds // 3600
    total_minutes = (total_seconds % 3600) // 60

    playlist_data = {
        'id': 101,
        'title': 'basdut',
        'creator': 'Lisan Al gaib',
        'songs': songs_data,
        'total_duration_hours': total_hours,
        'total_duration_minutes': total_minutes,
        'created_date': '2024-03-18',
        'description': 'A playlist featuring some of the biggest hits from various artists across genres.'
    }


    return render(request, 'play_user_playlist.html', {'playlist': playlist_data})

def search(request):
    query_str = request.GET.get('query')
    
    if query_str:
        songs = query(f"""
            SELECT k.id, k.judul AS title, string_agg(distinct g.genre, ', ') AS genre, ak.nama AS artist_name
            FROM KONTEN k
            JOIN SONG s ON k.id = s.id_konten
            JOIN GENRE g ON k.id = g.id_konten
            JOIN ARTIST a ON s.id_artist = a.id
            JOIN AKUN ak ON a.email_akun = ak.email
            WHERE k.judul ILIKE '%{query_str}%'
            GROUP BY k.id, k.judul, ak.nama
        """)
        
        user_playlists = query(f"""
            SELECT up.id_user_playlist, up.judul AS title, up.email_pembuat AS creator_email, ak.nama AS creator_name
            FROM USER_PLAYLIST up
            JOIN AKUN ak ON up.email_pembuat = ak.email
            WHERE up.judul ILIKE '%{query_str}%'
        """)
        
        results = []
        for song in songs:
            results.append({
                'type': 'SONG',
                'title': song['title'],
                'genre': song['genre'],
                'by': song['artist_name'],
                'url': reverse('song_detail', args=[song['id']])
            })
        for playlist in user_playlists:
            results.append({
                'type': 'USER PLAYLIST',
                'title': playlist['title'],
                'by': playlist['creator_name'],
                'url': reverse('playlist_detail', args=[playlist['id_user_playlist'], playlist['creator_email']])
            })
    else:
        results = []
    
    context = {
        'query': query_str,
        'results': results
    }
    return render(request, 'search_results.html', context)

def createpod(request):
    # Logika untuk menampilkan halaman createpod.html
    return render(request, 'createpod.html')


def createpodepisode(request):
    # Logika untuk menampilkan halaman createpod.html
    return render(request, 'createpod_episode.html')

def seechart(request):
    # Logika untuk menampilkan halaman createpod.html
    return render(request, 'seechart.html')

def daily(request):
    return render(request, 'daily.html')

def weekly(request):
    return render(request, 'weekly.html')

def monthly(request):
    return render(request, 'monthly.html')

def yearly(request):
    return render(request, 'yearly.html')


def podetail(request):
    return render(request, "podcastdetail.html")
def home(request):
    #redirect to login and register
    return redirect('main:login_and_register')

def dashboard(request):
    # Get user from session
    ses_info = get_session_info(request)
    email = ses_info['email']
    if not email:
        return redirect('main:login')
    
    user = query(f"SELECT * FROM AKUN WHERE email = '{email}'")[0]
    if ses_info['is_label']:
        user = query(f"SELECT * FROM LABEL WHERE email = '{email}'")[0]

    user = {
        'name': user['nama'],
        'email': user['email'],
        'city': user['kota_asal'],
        'gender': user['gender'],
        'birth_place': user['tempat_lahir'],
        'birth_date': user['tanggal_lahir'],
        'role': 'Regular User',
        'playlists': [
            {
                'name': 'Favorite Songs',
                'song_count': 10,
                'created_at': '2023-04-01',
                'total_duration': '1:25:30'
            },
            {
                'name': 'Workout Playlist',
                'song_count': 15,
                'created_at': '2022-12-15',
                'total_duration': '2:10:45'
            },
            {
                'name': 'Chill Vibes',
                'song_count': 8,
                'created_at': '2023-03-20',
                'total_duration': '1:18:12'
            },
        ],
    }

    context = {
        'user': user,
        'user_type': ses_info['is_label'] and 'label' or 'user',
    }
    return render(request, 'dashboard.html', context)


main\__init__.py:



marmut\asgi.py:
"""
ASGI config for marmut project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "marmut.settings")

application = get_asgi_application()



marmut\settings.py:
"""
Django settings for marmut project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import environ # Tambahkan kode berikut
import os # Tambahkan kode berikut

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env() # Tambahkan kode berikut

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-5dgque*$6nl$6wj!p#7%6b=ot92+jm@f%!(*9-2tz!3=&n&+*w"

PRODUCTION = env.bool('PRODUCTION', False)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "main",
    "playlist",
    "langganan",
    "song",
    "royalty_management",
]

LOGIN_URL = 'main:login'  # Change to your actual login URL
LOGIN_REDIRECT_URL = 'main:home'  # Change to the URL you want to redirect to after login
LOGOUT_REDIRECT_URL = 'main:login'  # Change to your actual logout redirect URL


AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 1209600  # Two weeks
SESSION_SAVE_EVERY_REQUEST = True



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = "marmut.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        'DIRS': [BASE_DIR / 'templates'],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "marmut.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

if PRODUCTION:
    DATABASES = {
        'default': env.db('DATABASE_URL')
    }
    DATABASES["default"]["ATOMIC_REQUESTS"] = True


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"



marmut\urls.py:
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('main.urls')),
    path('playlist/', include('playlist.urls')),
    path('langganan/', include('langganan.urls', namespace='langganan')),
    path('song/', include('song.urls')),
    path('royalty_management/', include('royalty_management.urls')),
]



marmut\wsgi.py:
"""
WSGI config for marmut project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "marmut.settings")

application = get_wsgi_application()



marmut\__init__.py:



main\templates\createpod.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CRUD Kelola Podcast</title>
    <!-- Include Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/4.6.0/css/bootstrap.min.css">
    <!-- Include Bootstrap Select CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.13.1/css/bootstrap-select.min.css">
    
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f8f9fa;
        }

        .section {
            margin-bottom: 30px;
            background-color: #fff;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .section h2 {
            margin-bottom: 20px;
            color: #007bff;
        }

        .podcast-table {
            width: 100%;
            border-collapse: collapse;
        }

        .podcast-table th, .podcast-table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ccc;
        }

        .podcast-table th {
            background-color: #f2f2f2;
        }

        .podcast-table td:last-child {
            text-align: center;
        }

        .podcast-button {
            padding: 5px 10px;
            border: none;
            border-radius: 3px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .podcast-button:hover {
            background-color: #f0f0f0;
        }
    </style>
</head>
<body>

<div class="container">

    <!-- CREATE PODCAST FORM -->
    <div class="section create-podcast">
        <h2>CREATE PODCAST</h2>
        <form action="#" method="POST">
            <label for="podcast-title">Judul:</label>
            <input type="text" id="podcast-title" name="podcast-title" required><br>
            
            <label for="podcast-genre">Genre:</label>
            <!-- Multiselect Dropdown for Genre -->
            <select id="podcast-genre" name="podcast-genre" class="selectpicker" multiple required>
                <option value="genre1">Genre 1</option>
                <option value="genre2">Genre 2</option>
                <!-- Add more genre options here -->
            </select><br>
            
            <label for="podcast-duration">Durasi:</label>
            <input type="text" id="podcast-duration" name="podcast-duration" required><br>
            
            <button type="submit">SUBMIT</button>
        </form>
    </div>

    <!-- LIST PODCAST -->
    <div class="section list-podcast">
        <h2>LIST PODCAST</h2>
        <table class="podcast-table">
            <thead>
                <tr>
                    <th>Judul</th>
                    <th>Jumlah Episode</th>
                    <th>Total Durasi</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Podcast1</td>
                    <td>0</td>
                    <td>0 menit</td>
                    <td>
                        <button class="podcast-button" onclick="window.location.href='createpod_episode.html'">Lihat Daftar Episode</button>
                        <button class="podcast-button">Tambah Episode</button>
                        <button class="podcast-button">Hapus</button>
                    </td>
                </tr>
                <tr>
                    <td>Podcast2</td>
                    <td>2</td>
                    <td>4 menit</td>
                    <td>
                        <button class="podcast-button" onclick="window.location.href='creadpo_podcast.html'">Lihat Daftar Episode</button>
                        <button class="podcast-button">Tambah Episode</button>
                        <button class="podcast-button">Hapus</button>
                    </td>
                </tr>
                <!-- Add more podcast entries here -->
            </tbody>
        </table>
    </div>

</div>

<!-- Include jQuery -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<!-- Include Bootstrap JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/4.6.0/js/bootstrap.min.js"></script>
<!-- Include Bootstrap Select JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.13.1/js/bootstrap-select.min.js"></script>

</body>
</html>



main\templates\createpod_episode.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DAFTAR EPISODE PADA PODCAST1</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }

        h1 {
            margin-bottom: 20px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ccc;
        }

        th {
            background-color: #f2f2f2;
        }

        td:last-child {
            text-align: center;
        }

        .delete-button {
            background-color: #dc3545;
            color: #fff;
            border: none;
            padding: 5px 10px;
            border-radius: 3px;
            cursor: pointer;
        }

        .delete-button:hover {
            background-color: #c82333;
        }

        .create-episode {
            margin-bottom: 40px; /* Menambahkan margin bottom agar terpisah dari daftar episode */
        }

        .create-episode form {
            margin-bottom: 20px; /* Menambahkan margin bottom agar terpisah dari daftar episode */
        }

        .create-episode label {
            display: block;
            margin-bottom: 5px;
        }

        .create-episode input,
        .create-episode select,
        .create-episode textarea {
            margin-bottom: 10px;
            width: 100%;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
        }

        .create-episode button {
            background-color: #007bff;
            color: #fff;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
        }

        .create-episode button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>

<!-- CREATE EPISODE FORM -->
<div class="section create-episode">
    <h2>CREATE EPISODE</h2>
    <form action="/add_episode" method="POST"> <!-- Ganti action dengan endpoint yang sesuai -->
        <label for="episode-podcast">Podcast:</label>
        <select id="episode-podcast" name="episode-podcast" required>
            <option value="Podcast1">Podcast1</option>
            <option value="Podcast2">Podcast2</option>
            <!-- Add more podcast options here -->
        </select><br>
        
        <label for="episode-title">Judul:</label>
        <input type="text" id="episode-title" name="episode-title" required><br>
        
        <label for="episode-description">Deskripsi:</label>
        <textarea id="episode-description" name="episode-description" required></textarea><br>
        
        <label for="episode-duration">Durasi:</label>
        <input type="text" id="episode-duration" name="episode-duration" required><br>
        
        <button type="submit">SUBMIT</button>
    </form>
</div>

<h1>DAFTAR EPISODE PADA PODCAST1</h1>

<table>
    <thead>
        <tr>
            <th>Judul Episode</th>
            <th>Deskripsi</th>
            <th>Durasi</th>
            <th>Tanggal</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>SubJudul1</td>
            <td>Lorem Ipsum ....</td>
            <td>59 menit</td>
            <td>18/03/2024</td>
            <td><button class="delete-button">Hapus</button></td>
        </tr>
        <tr>
            <td>SubJudul2</td>
            <td>Lorem Ipsum ....</td>
            <td>1 jam 2 menit</td>
            <td>25/03/2024</td>
            <td><button class="delete-button">Hapus</button></td>
        </tr>
        <!-- Add more episode entries here -->
    </tbody>
</table>

</body>
</html>



main\templates\daily.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chart Detail</title>
    <style>
        /* CSS styling */
        body {
            font-family: Arial, sans-serif;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            padding: 8px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        tr:hover {
            background-color: #f2f2f2;
        }
        .back-button {
            margin-top: 20px;
            padding: 10px 20px;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        .back-button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>

<div class="container">
    <!-- Chart Detail -->
    <h2>CHART DETAIL</h2>
    <p><strong>Tipe:</strong> Daily Top 20</p>

    <!-- Back Button -->
    <button class="back-button" onclick="goBack()">Kembali</button>

    <!-- Song List -->
    <h2>DAFTAR LAGU</h2>
    <table>
        <thead>
            <tr>
                <th>Judul Lagu</th>
                <th>Oleh</th>
                <th>Tanggal Rilis</th>
                <th>Total Plays</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Song1</td>
                <td>Artist1</td>
                <td>09/03/2024</td>
                <td>21000</td>
                <td><a href="#">Lihat</a></td>
            </tr>
            <tr>
                <td>Song2</td>
                <td>Artist2</td>
                <td>02/03/2024</td>
                <td>19000</td>
                <td><a href="#">Lihat</a></td>
            </tr>
            <!-- Add more song entries here -->
        </tbody>
    </table>
</div>

<!-- Script to go back to previous page -->
<script>
    function goBack() {
        window.history.back();
    }
</script>

</body>
</html>



main\templates\dashboard.html:
{% extends 'base.html' %}

{% block content %}

    <div class="container my-5">
        <h2 class="mb-4">Dashboard</h2>
        <div class="form-box">
            <div class="mb-3">
                <label class="form-label">Nama:</label>
                <p>{{ user.name }}</p>
            </div>
            <div class="mb-3">
                <label class="form-label">Email:</label>
                <p>{{ user.email }}</p>
            </div>
            <div class="mb-3">
                <label class="form-label">Kota Asal:</label>
                <p>{{ user.city }}</p>
            </div>
            <div class="mb-3">
                <label class="form-label">Gender:</label>
                <p>{{ user.gender }}</p>
            </div>
            <div class="mb-3">
                <label class="form-label">Tempat Lahir:</label>
                <p>{{ user.birth_place }}</p>
            </div>
            <div class="mb-3">
                <label class="form-label">Tanggal Lahir:</label>
                <p>{{ user.birth_date }}</p>
            </div>
            <div class="mb-3">
                <label class="form-label">Role:</label>
                <p>{{ user.role }}</p>
            </div>

            <h4 class="mb-3">Daftar Playlist</h4>
            {% if user.playlists %}
                <table class="table table-dark">
                    <thead>
                        <tr>
                            <th>Judul</th>
                            <th>Jumlah Lagu</th>
                            <th>Tanggal Dibuat</th>
                            <th>Total Durasi</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for playlist in user.playlists %}
                            <tr>
                                <td>{{ playlist.name }}</td>
                                <td>{{ playlist.song_count }}</td>
                                <td>{{ playlist.created_at }}</td>
                                <td>{{ playlist.total_duration }}</td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
            {% else %}
                <p>Belum Memiliki Playlist</p>
            {% endif %}
        </div>
    </div>


{% endblock %}




main\templates\login.html:
{% extends 'base.html' %}
{% block content %}
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="form-box">
                <h2 class="mb-3">Login</h2>
                {% if messages %}
                <ul>
                    {% for message in messages %}
                    <li{% if message.tags %} class="{{ message.tags }}"{% endif %}>{{ message }}</li>
                    {% endfor %}
                </ul>
                {% endif %}
                <form method="post" action="{% url 'main:login' %}">
                    {% csrf_token %}
                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <input type="text" class="form-control" id="email" name="email" required>
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <input type="password" class="form-control" id="password" name="password" required>
                    </div>
                    <button type="submit" class="btn btn-cyan">Login</button>
                </form>
            </div>
        </div>
    </form>
</div>
{% endblock %}



main\templates\login_and_register.html:
{% extends 'base.html' %}

{% block content %}
<div class="container mt-5 d-flex justify-content-center">
    <div class="form-box text-center" style="width: 50%; padding: 30px;">
        <h1>Welcome To Marmut - a Music Platform</h1>
        <h2>Marmut - B13</h2>
        <p>Select Login or Register:</p>
        <div class="btn-group-vertical" role="group" aria-label="Registration Type">
            <!-- Button for Pengguna with cyan color -->
            <button type="button" class="btn btn-cyan btn-lg mb-3" style="padding: 10px 20px;" onclick="window.location.href='{% url "main:login" %}'">Login</button>
            <!-- Button for Label with pink color -->
            <button type="button" class="btn btn-pink btn-lg" style="padding: 10px 20px;" onclick="window.location.href='{% url "main:register" %}'">Register</button>
        </div>
    </div>
</div>
{% endblock %}



main\templates\main.html:
ok gas


main\templates\monthly.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chart Detail</title>
    <style>
        /* CSS styling */
        body {
            font-family: Arial, sans-serif;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            padding: 8px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        tr:hover {
            background-color: #f2f2f2;
        }
        .back-button {
            margin-top: 20px;
            padding: 10px 20px;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        .back-button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>

<div class="container">
    <!-- Chart Detail -->
    <h2>CHART DETAIL</h2>
    <p><strong>Tipe:</strong> Monthly Top 20</p>

    <!-- Back Button -->
    <button class="back-button" onclick="goBack()">Kembali</button>

    <!-- Song List -->
    <h2>DAFTAR LAGU</h2>
    <table>
        <thead>
            <tr>
                <th>Judul Lagu</th>
                <th>Oleh</th>
                <th>Tanggal Rilis</th>
                <th>Total Plays</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Song1</td>
                <td>Artist1</td>
                <td>09/03/2024</td>
                <td>21000</td>
                <td><a href="#">Lihat</a></td>
            </tr>
            <tr>
                <td>Song2</td>
                <td>Artist2</td>
                <td>02/03/2024</td>
                <td>19000</td>
                <td><a href="#">Lihat</a></td>
            </tr>
            <!-- Add more song entries here -->
        </tbody>
    </table>
</div>

<!-- Script to go back to previous page -->
<script>
    function goBack() {
        window.history.back();
    }
</script>

</body>
</html>



main\templates\play_song.html:
{% extends 'base.html' %}

{% block content %}
{% include 'navbar_guest.html' %} 
<div class="container mt-4">
    <div class="card bg-dark text-white">
        <div class="card-header">
            <h1>{{ song.title }}</h1>
        </div>
        <div class="card-body">
            <h5 class="card-title">{{ song.artist }}</h5>
            <p class="card-text"><strong>Genres:</strong>
                {% for genre in song.genres %}
                    <span class="badge bg-secondary">{{ genre }}</span>
                {% endfor %}
            </p>
            <p class="card-text"><strong>Songwriters:</strong>
                {% for songwriter in song.songwriters %}
                    <span>{{ songwriter }}</span>{% if not forloop.last %}, {% endif %}
                {% endfor %}
            </p>
            <p class="card-text"><strong>Duration:</strong> {{ song.duration }} minutes</p>
            <p class="card-text"><strong>Release Date:</strong> {{ song.release_date }}</p>
            <p class="card-text"><strong>Year:</strong> {{ song.year }}</p>
            <p class="card-text"><strong>Album:</strong> {{ song.album }}</p>
            <p class="card-text"><strong>Total Plays:</strong> {{ song.total_plays }}</p>
            <p class="card-text"><strong>Total Downloads:</strong> {{ song.total_downloads }}</p>

            <input type="range" id="songProgress" name="songProgress" class="form-range" min="0" max="100" value="0">
            <button onclick="checkProgress()" class="btn btn-primary mt-2">Play</button>

            <form method="POST" class="d-inline">
                {% csrf_token %}
                <button type="submit" class="btn btn-info mt-2">Add to Playlist</button>
            </form>

            {% if user_is_premium %}
                <form method="POST" class="d-inline">
                    {% csrf_token %}
                    <button type="submit" class="btn btn-success mt-2">Download</button>
                </form>
            {% endif %}
        </div>
        <div class="card-footer text-muted">
            <aclass="btn btn-outline-light">Back</a>
        </div>
    </div>
</div>

{% endblock %}



main\templates\play_user_playlist.html:
{% extends 'base.html' %}

{% block content %}
{% include 'navbar_guest.html' %} 
<div class="container mt-4">
    <div class="card bg-dark text-white">
        <div class="card-header">
            <h1>{{ playlist.title }}</h1>
        </div>
        <div class="card-body">
            <h5 class="card-title">Created by: {{ playlist.creator }}</h5>
            <p class="card-text"><strong>Number of Songs:</strong> {{ playlist.songs|length }}</p>
            <p class="card-text"><strong>Total Duration:</strong> {{ playlist.total_duration_hours }} hours {{ playlist.total_duration_minutes }} minutes</p>
            <p class="card-text"><strong>Created On:</strong> {{ playlist.created_date }}</p>
            <p class="card-text"><strong>Description:</strong> {{ playlist.description }}</p>
            
            <button class="btn btn-primary mt-2" onclick="shufflePlay()">Shuffle Play</button>
        </div>
        <div class="card-footer text-muted">
            <a  class="btn btn-outline-light">Back</a>
        </div>
    </div>

    <div class="table-responsive mt-4">
        <table class="table table-dark table-striped">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Artist</th>
                    <th>Duration</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for song in playlist.songs %}
                <tr>
                    <td>{{ song.title }}</td>
                    <td>{{ song.artist }}</td>
                    <td>{{ song.duration }}</td>
                    <td>
                        <a class="btn btn-sm btn-secondary">View</a>
                        <button class="btn btn-sm btn-info" >Play</button>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</div>

{% endblock %}



main\templates\podcastdetail.html:
{% extends 'base.html' %}

{% block content %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Podcast Detail</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>

<div class="podcast-detail">
    <h2>PODCAST DETAIL</h2>
    <div class="podcast-info">
        <p><strong>Judul:</strong> Podcast18</p>
        <p><strong>Genre(s):</strong></p>
        <ul>
            <li>Genre1</li>
            <li>Genre2</li>
        </ul>
        <p><strong>Podcaster:</strong> Artist1</p>
        <p><strong>Total Durasi:</strong> 8 jam 20 menit</p>
        <p><strong>Tanggal Rilis:</strong> 18/03/24</p>
        <p><strong>Tahun:</strong> 2024</p>
    </div>
    <a href="#" class="back-button">Kembali</a>

</div>

<div class="episode-list">
    <h2>DAFTAR EPISODE</h2>
    <table>
        <thead>
            <tr>
                <th>Judul Episode</th>
                <th>Deskripsi</th>
                <th>Durasi</th>
                <th>Tanggal</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>SubJudul1</td>
                <td>Lorem Ipsum ....</td>
                <td>59 menit</td>
                <td>18/03/2024</td>
            </tr>
            <tr>
                <td>SubJudul2</td>
                <td>Lorem Ipsum ....</td>
                <td>1 jam 2 menit</td>
                <td>25/03/2024</td>
            </tr>
            <!-- Data episode lainnya -->
        </tbody>
    </table>
    
</div>

</body>
</html>

<style>
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
}

.podcast-detail, .episode-list {
    width: 80%;
    margin: 20px auto;
}

h2 {
    margin-bottom: 10px;
}

.podcast-info {
    margin-bottom: 20px;
}

.podcast-info p {
    margin: 5px 0;
}

.podcast-info ul {
    margin-top: 5px;
}

.back-button, .create-button, .chart-button {
    display: inline-block;
    padding: 5px 10px;
    border-radius: 5px;
    text-decoration: none;
}

.back-button {
    background-color: #007bff;
    color: #fff;
}

.create-button {
    background-color: #dc3545; /* Warna merah */
    color: #fff;
    margin-left: 10px; /* Jarak antara tombol */
}

.chart-button {
    background-color: #28a745; /* Warna hijau */
    color: #fff;
    margin-left: 10px; /* Jarak antara tombol */
}

.back-button:hover, .create-button:hover, .chart-button:hover {
    background-color: #0056b3; /* Warna merah lebih tua */
}

table {
    width: 100%;
    border-collapse: collapse;
}

th, td {
    padding: 8px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

tr:hover {
    background-color: #f2f2f2;
}
</style>

{% endblock content %}



main\templates\register.html:
{% extends 'base.html' %}

{% block content %}
<div class="container mt-5 d-flex justify-content-center">
    <div class="form-box text-center" style="width: 50%; padding: 30px;">
        <h2>Register</h2>
        <p>Select your registration type:</p>
        <div class="btn-group-vertical" role="group" aria-label="Registration Type">
            <!-- Button for Pengguna with cyan color -->
            <button type="button" class="btn btn-cyan btn-lg mb-3" style="padding: 10px 20px;" onclick="window.location.href='{% url "main:register_user" %}'">Pengguna</button>
            <!-- Button for Label with pink color -->
            <button type="button" class="btn btn-pink btn-lg" style="padding: 10px 20px;" onclick="window.location.href='{% url "main:register_label" %}'">Label</button>
        </div>
    </div>
</div>
{% endblock %}



main\templates\register_label.html:
{% extends 'base.html' %}

{% block content %}
<div class="container">
    
    <div class="form-box">
        <h2>FORM REGISTRASI - Label</h2>
        {% if messages %}
        <ul>
            {% for message in messages %}
            <li{% if message.tags %} class="{{ message.tags }}"{% endif %}>{{ message }}</li>
            {% endfor %}
        </ul>
        {% endif %}
        <form action="{% url 'main:register_label' %}" method="POST">
            {% csrf_token %}
            <label for="email" class="form-label">Email:</label>
            <input type="email" id="email" name="email" required class="form-control"><br>

            <label for="password" class="form-label">Password:</label>
            <input type="password" id="password" name="password" required class="form-control"><br>

            <label for="name" class="form-label">Nama:</label>
            <input type="text" id="name" name="name" required class="form-control"><br>

            <label for="contact" class="form-label">Kontak:</label>
            <input type="text" id="contact" name="contact" required class="form-control"><br>

            <button type="submit" class="btn btn-cyan">Register</button>
        </form>
    </div>
</div>
{% endblock %}



main\templates\register_user.html:
{% extends 'base.html' %}

{% block content %}
<div class="container">
    <div class="form-box">
        <h2>FORM REGISTRASI</h2>
        {% if messages %}
        <ul>
            {% for message in messages %}
            <li{% if message.tags %} class="{{ message.tags }}"{% endif %}>{{ message }}</li>
            {% endfor %}
        </ul>
        {% endif %}
        <form action="{% url 'main:register_user' %}" method="POST">
            {% csrf_token %}
            <label for="email" class="form-label">Email:</label>
            <input type="email" id="email" name="email" required class="form-control"><br>

            <label for="password" class="form-label">Password:</label>
            <input type="password" id="password" name="password" required class="form-control"><br>

            <label for="name" class="form-label">Nama:</label>
            <input type="text" id="name" name="name" required class="form-control"><br>

            <label for="gender" class="form-label">Gender:</label>
            <select id="gender" name="gender" class="form-control">
                <option value="male">Laki-laki</option>
                <option value="female">Perempuan</option>
            </select><br>
            
            <label for="birthplace" class="form-label">Tempat Lahir :</label>
            <input type="text" id="birthplace" name="birthplace" required class="form-control"><br>

            <label for="birthdate" class="form-label">Tanggal lahir:</label>
            <input type="date" id="birthdate" name="birthdate" required class="form-control"><br>

            <label for="city" class="form-label">Kota asal:</label>
            <input type="text" id="city" name="city" required class="form-control"><br>

            <label class="form-label">Role:</label><br>
            <input type="checkbox" id="podcaster" name="is_podcaster" value="True" class="form-check-input">
            <label for="podcaster" class="form-check-label">Podcaster</label><br>

            <input type="checkbox" id="artist" name="is_artist" value="True" class="form-check-input">
            <label for="artist" class="form-check-label">Artist</label><br>

            <input type="checkbox" id="songwriter" name="is_songwriter" value="True" class="form-check-input">
            <label for="songwriter" class="form-check-label">Songwriter</label><br><br>

            <button type="submit" class="btn btn-pink">Register</button>
        </form>
    </div>
</div>
{% endblock %}



main\templates\seechart.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chart List</title>
    <style>
        /* CSS styling */
        body {
            font-family: Arial, sans-serif;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            padding: 8px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        tr:hover {
            background-color: #f2f2f2;
        }
        .back-button {
            margin-top: 20px;
            padding: 10px 20px;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        .back-button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>

<div class="container">
    <!-- Chart List -->
    <h2>CHART LIST</h2>
    <table>
        <thead>
            <tr>
                <th>Tipe</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Daily Top 20</td>
                <td><a href="daily.html">Lihat Daftar Lagu</a></td>
            </tr>
            <tr>
                <td>Weekly Top 20</td>
                <td><a href="weekly.html">Lihat Daftar Lagu</a></td>
            </tr>
            <tr>
                <td>Monthly Top 20</td>
                <td><a href="monthly.html">Lihat Daftar Lagu</a></td>
            </tr>
            <tr>
                <td>Yearly Top 20</td>
                <td><a href="yearly.html">Lihat Daftar Lagu</a></td>
            </tr>
        </tbody>
    </table>

    <!-- Back Button -->
    <button class="back-button" onclick="goBack()">Kembali</button>
</div>

<!-- Script to go back to previous page -->
<script>
    function goBack() {
        window.history.back();
    }
</script>

</body>
</html>



main\templates\weekly.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chart Detail</title>
    <style>
        /* CSS styling */
        body {
            font-family: Arial, sans-serif;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            padding: 8px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        tr:hover {
            background-color: #f2f2f2;
        }
        .back-button {
            margin-top: 20px;
            padding: 10px 20px;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        .back-button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>

<div class="container">
    <!-- Chart Detail -->
    <h2>CHART DETAIL</h2>
    <p><strong>Tipe:</strong> Weekly Top 20</p>

    <!-- Back Button -->
    <button class="back-button" onclick="goBack()">Kembali</button>

    <!-- Song List -->
    <h2>DAFTAR LAGU</h2>
    <table>
        <thead>
            <tr>
                <th>Judul Lagu</th>
                <th>Oleh</th>
                <th>Tanggal Rilis</th>
                <th>Total Plays</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Song1</td>
                <td>Artist1</td>
                <td>09/03/2024</td>
                <td>21000</td>
                <td><a href="#">Lihat</a></td>
            </tr>
            <tr>
                <td>Song2</td>
                <td>Artist2</td>
                <td>02/03/2024</td>
                <td>19000</td>
                <td><a href="#">Lihat</a></td>
            </tr>
            <!-- Add more song entries here -->
        </tbody>
    </table>
</div>

<!-- Script to go back to previous page -->
<script>
    function goBack() {
        window.history.back();
    }
</script>

</body>
</html>



main\templates\yearly.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chart Detail</title>
    <style>
        /* CSS styling */
        body {
            font-family: Arial, sans-serif;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            padding: 8px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        tr:hover {
            background-color: #f2f2f2;
        }
        .back-button {
            margin-top: 20px;
            padding: 10px 20px;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        .back-button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>

<div class="container">
    <!-- Chart Detail -->
    <h2>CHART DETAIL</h2>
    <p><strong>Tipe:</strong> Yearly Top 20</p>

    <!-- Back Button -->
    <button class="back-button" onclick="goBack()">Kembali</button>

    <!-- Song List -->
    <h2>DAFTAR LAGU</h2>
    <table>
        <thead>
            <tr>
                <th>Judul Lagu</th>
                <th>Oleh</th>
                <th>Tanggal Rilis</th>
                <th>Total Plays</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Song1</td>
                <td>Artist1</td>
                <td>09/03/2024</td>
                <td>21000</td>
                <td><a href="#">Lihat</a></td>
            </tr>
            <tr>
                <td>Song2</td>
                <td>Artist2</td>
                <td>02/03/2024</td>
                <td>19000</td>
                <td><a href="#">Lihat</a></td>
            </tr>
            <!-- Add more song entries here -->
        </tbody>
    </table>
</div>

<!-- Script to go back to previous page -->
<script>
    function goBack() {
        window.history.back();
    }
</script>

</body>
</html>



static\css\style.css:
/* static/css/style.css */
h1, h5, p {
    transition: opacity 2s ease-in-out;
    opacity: 0;
}

body:hover h1, body:hover h5, body:hover p {
    opacity: 1;
}


main\static\css\style.css:
/* static/css/style.css */
h1, h5, p {
    transition: opacity 2s ease-in-out;
    opacity: 0;
}

body:hover h1, body:hover h5, body:hover p {
    opacity: 1;
}


marmut\asgi.py:
"""
ASGI config for marmut project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "marmut.settings")

application = get_asgi_application()



marmut\settings.py:
"""
Django settings for marmut project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import environ # Tambahkan kode berikut
import os # Tambahkan kode berikut

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env() # Tambahkan kode berikut

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-5dgque*$6nl$6wj!p#7%6b=ot92+jm@f%!(*9-2tz!3=&n&+*w"

PRODUCTION = env.bool('PRODUCTION', False)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "main",
    "playlist",
    "langganan",
    "song",
    "royalty_management",
]

LOGIN_URL = 'main:login'  # Change to your actual login URL
LOGIN_REDIRECT_URL = 'main:home'  # Change to the URL you want to redirect to after login
LOGOUT_REDIRECT_URL = 'main:login'  # Change to your actual logout redirect URL


AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 1209600  # Two weeks
SESSION_SAVE_EVERY_REQUEST = True



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = "marmut.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        'DIRS': [BASE_DIR / 'templates'],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "marmut.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

if PRODUCTION:
    DATABASES = {
        'default': env.db('DATABASE_URL')
    }
    DATABASES["default"]["ATOMIC_REQUESTS"] = True


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"



marmut\urls.py:
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('main.urls')),
    path('playlist/', include('playlist.urls')),
    path('langganan/', include('langganan.urls', namespace='langganan')),
    path('song/', include('song.urls')),
    path('royalty_management/', include('royalty_management.urls')),
]



marmut\wsgi.py:
"""
WSGI config for marmut project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "marmut.settings")

application = get_wsgi_application()



marmut\__init__.py:




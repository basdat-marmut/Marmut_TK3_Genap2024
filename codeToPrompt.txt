ini adalah kode sekarang:

song\admin.py:
from django.contrib import admin

# Register your models here.



song\apps.py:
from django.apps import AppConfig


class SongConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'song'



song\models.py:
from django.db import models
from django.contrib.auth.models import User
import uuid

class Song(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    title = models.CharField(max_length=100)
    genre = models.CharField(max_length=100)
    artist = models.CharField(max_length=100)
    songwriter = models.CharField(max_length=100)
    duration = models.IntegerField()
    release_date = models.DateField()
    year = models.IntegerField()
    total_play = models.IntegerField(default=0)
    total_download = models.IntegerField(default=0)
    album = models.CharField(max_length=100)

    def __str__(self):
        return self.title

class AkunPlaySong(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    song = models.ForeignKey(Song, on_delete=models.CASCADE)
    timestamp = models.DateTimeField(auto_now_add=True)

class DownloadedSong(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    song = models.ForeignKey(Song, on_delete=models.CASCADE)
    timestamp = models.DateTimeField(auto_now_add=True)



song\tests.py:
from django.test import TestCase

# Create your tests here.



song\urls.py:
from django.urls import path
from . import views

urlpatterns = [
    path('', views.song_list, name='song_list'),
    path('<uuid:song_id>/', views.song_detail, name='song_detail'),
    path('<uuid:song_id>/play/', views.play_song, name='play_song'),
    path('<uuid:song_id>/add-to-playlist/', views.add_to_playlist, name='add_to_playlist'),
    path('<uuid:song_id>/download/', views.download_song, name='download_song'),
    path('downloaded/', views.downloaded_songs, name='downloaded_songs'),
    path('search/', views.search, name='search'),
]



song\views.py:
from pyexpat.errors import messages
from django.shortcuts import render, redirect, get_object_or_404
from django.urls import reverse
from .models import Song, AkunPlaySong, DownloadedSong
from playlist.models import Playlist, UserPlaylist
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from django.utils import timezone
from connector.query import query, get_session_info


def song_list(request):
    songs = Song.objects.all()
    return render(request, 'song/song_list.html', {'songs': songs})

def song_detail(request, song_id):
    song = get_object_or_404(Song, id=song_id)
    is_premium = request.user.is_authenticated and request.user.is_premium
    
    if request.method == 'POST':
        if 'play' in request.POST:
            progress = int(request.POST.get('progress', 0))
            if progress > 70:
                song.total_play += 1
                song.save()
                AkunPlaySong.objects.create(user=request.user, song=song, timestamp=timezone.now())
        
        elif 'add_to_playlist' in request.POST:
            playlist_id = request.POST.get('playlist')
            playlist = get_object_or_404(Playlist, id=playlist_id, user=request.user)
            if UserPlaylist.objects.filter(playlist=playlist, song=song).exists():
                message = f"Lagu dengan judul '{song.title}' sudah ditambahkan di '{playlist.title}'!"
            else:
                UserPlaylist.objects.create(playlist=playlist, song=song)
                message = f"Berhasil menambahkan Lagu dengan judul '{song.title}' ke '{playlist.title}'!"
            return render(request, 'song/song_detail.html', {'song': song, 'is_premium': is_premium, 'message': message})
        
        elif 'download' in request.POST:
            if is_premium:
                if DownloadedSong.objects.filter(user=request.user, song=song).exists():
                    message = f"Lagu dengan judul '{song.title}' sudah pernah di unduh!"
                else:
                    DownloadedSong.objects.create(user=request.user, song=song)
                    song.total_download += 1
                    song.save()
                    message = f"Berhasil mengunduh Lagu dengan judul '{song.title}'!"
                return render(request, 'song/song_detail.html', {'song': song, 'is_premium': is_premium, 'message': message})
    
    playlists = Playlist.objects.filter(user=request.user)
    return render(request, 'song/song_detail.html', {'song': song, 'is_premium': is_premium, 'playlists': playlists})

@login_required
def play_song(request, song_id):
    song = get_object_or_404(Song, id=song_id)
    progress = int(request.POST.get('progress', 0))
    if progress > 70:
        song.total_play += 1
        song.save()
        AkunPlaySong.objects.create(user=request.user, song=song)
    return JsonResponse({'status': 'success'})

@login_required
def add_to_playlist(request, song_id):
    song = get_object_or_404(Song, id=song_id)
    if request.method == 'POST':
        playlist_id = request.POST.get('playlist')
        playlist = get_object_or_404(Playlist, id=playlist_id, user=request.user)
        UserPlaylist.objects.create(playlist=playlist, song=song)
        return render(request, 'song/message.html', {
            'message': f"Berhasil menambahkan Lagu dengan judul '{song.title}' ke '{playlist.name}'!",
            'playlist_url': reverse('playlist_detail', args=[playlist.id]),
            'song_id': song.id,
        })
    playlists = Playlist.objects.filter(user=request.user)
    return render(request, 'song/add_to_playlist.html', {'song': song, 'playlists': playlists})

@login_required
def download_song(request, song_id):
    song = get_object_or_404(Song, id=song_id)
    if request.user.is_premium:
        song.total_download += 1
        song.save()
        DownloadedSong.objects.create(user=request.user, song=song)
        return render(request, 'song/message.html', {
            'message': f"Berhasil mengunduh Lagu dengan judul '{song.title}'!",
            'playlist_url': reverse('downloaded_songs'),
            'song_id': song.id,
        })
    return redirect('song_detail', song_id=song.id)

def downloaded_songs(request):
    ses_info = get_session_info(request)
    if not ses_info:
        return redirect('main:login')
    
    user_email = ses_info['email']
    downloaded_songs = DownloadedSong.objects.filter(user__email=user_email).order_by('-timestamp')
    
    if request.method == 'POST':
        song_id = request.POST.get('song_id')
        song = get_object_or_404(Song, id=song_id)
        downloaded_song = get_object_or_404(DownloadedSong, user__email=user_email, song_id=song_id)
        downloaded_song.delete()
        song.total_download -= 1
        song.save()
        messages.success(request, f"Berhasil menghapus Lagu dengan judul '{song.title}' dari daftar unduhan!")
        return redirect('downloaded_songs')
    
    return render(request, 'song/downloaded_songs.html', {'downloaded_songs': downloaded_songs})


def search(request):
    query = request.GET.get('query')
    
    results = []
    
    if query:
        songs = Song.objects.filter(title__icontains=query)
        podcasts = podcast.objects.filter(title__icontains=query)
        
        for song in songs:
            results.append({
                'type': 'SONG',
                'title': song.title,
                'by': song.artist,
                'url': reverse('song_detail', args=[song.id])
            })
        for podcast in podcasts:
            results.append({
                'type': 'PODCAST',
                'title': podcast.title,
                'by': podcast.podcaster,
                'url': reverse('podcast_detail', args=[podcast.id])
            })
    
    context = {
        'query': query,
        'results': results
    }
    return render(request, 'main/search_results.html', context)










song\__init__.py:



langganan\admin.py:
from django.contrib import admin

# Register your models here.



langganan\apps.py:
from django.apps import AppConfig


class LanggananConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'langganan'



langganan\models.py:
from django.db import models
from django.contrib.auth.models import User

class Paket(models.Model):
    jenis = models.CharField(max_length=50, primary_key=True)
    harga = models.IntegerField()

class Transaction(models.Model):
    id = models.BigAutoField(primary_key=True)
    jenis_paket = models.ForeignKey(Paket, on_delete=models.CASCADE)
    email = models.ForeignKey(User, on_delete=models.CASCADE)
    timestamp_dimulai = models.DateTimeField()
    timestamp_berakhir = models.DateTimeField()
    metode_bayar = models.CharField(max_length=50)
    nominal = models.IntegerField()



langganan\tests.py:
from django.test import TestCase

# Create your tests here.



langganan\urls.py:
from django.urls import path
from . import views

app_name = 'langganan'

urlpatterns = [
    path('langganan_paket/', views.langganan_paket, name='langganan_paket'),
    path('riwayat_transaksi/', views.riwayat_transaksi, name='riwayat_transaksi'),
    path('pembayaran_paket/<str:jenis>/', views.pembayaran_paket, name='pembayaran_paket'),
]



langganan\views.py:
import uuid
from django.shortcuts import render, redirect
from django.urls import reverse
from django.utils import timezone
from .models import Paket, Transaction
from connector.query import query, get_session_info

def langganan_paket(request):
    ses_info = get_session_info(request)
    if not ses_info:
        return redirect('main:login')
    
    paket_list = query("SELECT * FROM PAKET")
    context = {'paket_list': paket_list}
    return render(request, 'langganan/langganan_paket.html', context)

def riwayat_transaksi(request):
    ses_info = get_session_info(request)
    if not ses_info:
        return redirect('main:login')
    
    email = ses_info['email']
    transaksi_list = query(f"""
        SELECT t.id, p.jenis, t.timestamp_dimulai, t.timestamp_berakhir, t.metode_bayar, t.nominal
        FROM TRANSACTION t
        JOIN PAKET p ON t.jenis_paket = p.jenis
        WHERE t.email = '{email}'
        ORDER BY t.timestamp_dimulai DESC
    """)
    
    context = {'transaksi_list': transaksi_list}
    return render(request, 'langganan/riwayat_transaksi.html', context)

def pembayaran_paket(request, jenis):
    ses_info = get_session_info(request)
    if not ses_info:
        return redirect('main:login')
    
    email = ses_info['email']
    
    if request.method == 'POST':
        metode_bayar = request.POST.get('metode_bayar')
        paket = query(f"SELECT * FROM PAKET WHERE jenis = '{jenis}'")
        if not paket:
            return redirect('langganan:langganan_paket')
        paket = paket[0]
        
        # Check for existing active subscription
        active_subscription = query(f"SELECT * FROM TRANSACTION WHERE email = '{email}' AND timestamp_berakhir > NOW()")
        if active_subscription:
            return render(request, 'langganan/langganan_paket.html', {'error': 'You already have an active subscription.'})
        
        # Create new transaction
        timestamp_dimulai = timezone.now()
        timestamp_berakhir = timestamp_dimulai + timezone.timedelta(days=int(paket['jenis'].split()[0]) * 30)
        transaction_id = str(uuid.uuid4())  # Generate a unique transaction ID
        
        query(f"""
            INSERT INTO TRANSACTION (id, jenis_paket, email, timestamp_dimulai, timestamp_berakhir, metode_bayar, nominal)
            VALUES ('{transaction_id}', '{jenis}', '{email}', '{timestamp_dimulai}', '{timestamp_berakhir}', '{metode_bayar}', {paket['harga']})
        """)
        
        # Update user to premium
        query(f"DELETE FROM NONPREMIUM WHERE email = '{email}'")
        query(f"INSERT INTO PREMIUM (email) VALUES ('{email}')")
        
        return redirect('langganan:riwayat_transaksi')
    else:
        paket = query(f"SELECT * FROM PAKET WHERE jenis = '{jenis}'")
        if not paket:
            return redirect('langganan:langganan_paket')
        paket = paket[0]
        context = {'paket': paket}
        return render(request, 'langganan/pembayaran_paket.html', context)


langganan\__init__.py:



templates\base.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Marmut</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body, .form-label, .btn {
            background-color: #121212; 
            color: #fff; 
        }
        h2 {
            color: #fff; 
        }
        .form-box {
            background-color: #333;
            padding: 20px;
            border-radius: 8px;
            border: 1px solid #444;
            box-shadow: 0 4px 8px rgba(0,0,0,0.5);
        }
        .btn-pink {
            background-color: #ff007f; 
            border-color: #ff007f;
        }
        .btn-pink:hover {
            background-color: #e60074;
            border-color: #cc0066;
        }
        .btn-cyan {
            background-color: #00ffff; 
            border-color: #00ffff;
        }
        .btn-cyan:hover {
            background-color: #00e5e5;
            border-color: #00cccc;
        }
        .form-control {
            background-color: #222;
            border: 1px solid #555;
            color: #fff;
        }
        .form-control:focus {
            box-shadow: 0 0 0 0.25rem rgba(0, 255, 255, 0.25);
            border-color: #00ffff;
        }
    </style>
</head>
<body>
    {% include 'navbar_user.html' %}

    <div class="container mt-4">
        {% block content %}{% endblock %}
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>


templates\navbar_guest.html:
<nav class="navbar navbar-expand-md navbar-dark bg-dark-custom">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">Marmut</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse" aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarCollapse">
            <ul class="navbar-nav me-auto mb-2 mb-md-0">
                <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="#">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Pricing</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'playlist_list' %}">Kelola Playlist</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'langganan_paket' %}">Langganan Paket</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'song_list' %}">Daftar Lagu</a>
                </li>
                <li>
                    <form class="d-flex" action="{% url 'main:search' %}" method="get">
                        <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search" name="query">
                        <button class="btn btn-outline-success" type="submit">Search</button>
                    </form>
                </li>                
            </ul>
            <form class="d-flex">
                <a href="{% url 'main:login' %}" class="btn btn-pink me-2" type="submit">Login</a>
                <a href="{% url 'main:register' %}" class="btn btn-cyan" type="submit">Register</a>
            </form>
        </div>
    </div>
</nav>


templates\navbar_user.html:
<nav class="navbar navbar-expand-md navbar-dark bg-dark-custom">
    <div class="container-fluid">
        <a class="navbar-brand" href="{% url 'main:home' %}">Mahmud</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse" aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarCollapse">
            <ul class="navbar-nav me-auto mb-2 mb-md-0">
                {% if not navbar.is_guest %}
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'main:dashboard' %}">Dashboard</a>
                    </li>
                    {% if navbar.is_user or navbar.is_artist or navbar.is_songwriter or navbar.is_podcaster %}
                        <li class="nav-item">
                            <a class="nav-link" href="#">Chart</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">Search Bar</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'playlist_list' %}">Kelola Playlist</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'langganan:langganan_paket' %}">Langganan Paket</a>
                        </li>
                    {% endif %}
                    {% if navbar.is_premium %}
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'downloaded_songs' %}">Kelola Downloaded Songs</a>
                        </li>
                    {% endif %}
                    {% if navbar.is_podcaster %}
                        <li class="nav-item">
                            <a class="nav-link" href="#">Kelola Podcast</a>
                        </li>
                    {% endif %}
                    {% if navbar.is_artist or navbar.is_songwriter %}
                        <!--Test Deployan up to date atau nggak-->
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'royalty_management:view_album' %}">Kelola Album & Songs</a>
                        </li>
                    {% endif %}
                    {% if navbar.is_label %}
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'royalty_management:view_album_label' %}">Kelola Album</a>
                        </li>
                    {% endif %}
                    {% if navbar.is_artist or navbar.is_songwriter or navbar.is_label %}
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'royalty_management:view_royalty' %}">Cek Royalti</a>
                        </li>
                    {% endif %}
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'main:logout' %}">Logout</a>
                    </li>
                {% else %}
                    <li class="nav-item">
                        <a class="nav-link active" href="{% url 'main:home' %}">Home</a>
                    </li>
                {% endif %}
            </ul>
            <form class="d-flex" action="{% url 'main:search' %}" method="get">
                <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search" name="query">
                <button class="btn btn-outline-success" type="submit">Search</button>
            </form>
  
            {% if navbar.is_guest %}
                <form class="d-flex">
                    <button class="btn btn-pink me-2" type="button" onclick="location.href='{% url 'main:login' %}'">Login</button>
                    <button class="btn btn-cyan" type="button" onclick="location.href='{% url 'main:register' %}'">Register</button>
                </form>
            {% endif %}
        </div>
    </div>
</nav>



templates\search_results.html:
{% extends 'base.html' %}

{% block content %}
<h2>Hasil Pencarian "{{ query }}"</h2>

{% if results %}
    <table class="table table-dark">
        <thead>
            <tr>
                <th>Tipe</th>
                <th>Judul</th>
                <th>Genre</th>
                <th>Oleh</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for result in results %}
                <tr>
                    <td>{{ result.type }}</td>
                    <td>{{ result.title }}</td>
                    <td>{{ result.genre }}</td>
                    <td>{{ result.by }}</td>
                    <td>
                        <a href="{{ result.url }}" class="btn btn-sm btn-info">Lihat</a>
                    </td>
                </tr>
            {% endfor %}
        </tbody>
    </table>
{% else %}
    <p>Maaf, pencarian untuk "{{ query }}" tidak ditemukan</p>
{% endif %}
{% endblock %}



playlist\admin.py:
from django.contrib import admin

# Register your models here.



playlist\apps.py:
from django.apps import AppConfig


class PlaylistConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'playlist'



playlist\forms.py:
from django import forms
from .models import Playlist, Song, UserPlaylist

class PlaylistForm(forms.ModelForm):
    class Meta:
        model = Playlist
        fields = ['name', 'description']

class UserPlaylistForm(forms.ModelForm):
    song = forms.ModelChoiceField(queryset=Song.objects.all(), empty_label=None)

    class Meta:
        model = UserPlaylist
        fields = ['song']


playlist\models.py:
from django.db import models
from django.contrib.auth.models import User
import uuid

class Playlist(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    name = models.CharField(max_length=100)
    description = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.name

class Song(models.Model):
    title = models.CharField(max_length=100)
    artist = models.CharField(max_length=100)
    duration = models.IntegerField()

    def __str__(self):
        return self.title

class UserPlaylist(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    playlist = models.ForeignKey(Playlist, on_delete=models.CASCADE)
    song = models.ForeignKey(Song, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)



playlist\tests.py:
from django.test import TestCase

# Create your tests here.



playlist\urls.py:
from django.urls import path
from . import views

urlpatterns = [
    path('', views.playlist_list, name='playlist_list'),
    path('create/', views.playlist_create, name='playlist_create'),
    path('<uuid:playlist_id>/', views.playlist_detail, name='playlist_detail'),
    path('<uuid:playlist_id>/update/', views.playlist_update, name='playlist_update'),
    path('<uuid:playlist_id>/delete/', views.playlist_delete, name='playlist_delete'),
    path('<uuid:playlist_id>/add-song/', views.add_song_to_playlist, name='add_song_to_playlist'),
    path('<uuid:playlist_id>/remove-song/<uuid:song_id>/', views.remove_song_from_playlist, name='remove_song_from_playlist'),
]



playlist\views.py:
from django.shortcuts import render, redirect, get_object_or_404
from django.urls import reverse
import uuid
from datetime import datetime
from connector.query import query, get_session_info
#httpresponse
from django.http import HttpResponse, HttpResponseNotFound
from django.shortcuts import render, redirect
from django.http import HttpResponseNotFound
from connector.query import get_session_info, query, get_navbar_info  # Assuming these are custom utility functions
#csrf_exempt
from django.views.decorators.csrf import csrf_exempt

@csrf_exempt
def playlist_list(request):
    user = get_session_info(request)
    email = user['email']
    if not user:
        return redirect('main:login')
    playlists = query(f"""
        SELECT * FROM USER_PLAYLIST up
        JOIN AKUN a ON up.email_pembuat = a.email
        WHERE up.email_pembuat = '{email}';
    """)
    res_playlist = []
    for playlist in playlists:
        res_playlist.append({
            'name'  : playlist['judul'],
            'description' : playlist['deskripsi'],
            'jumlah_lagu' : playlist['jumlah_lagu'],
            'durasi' : playlist['total_durasi'],
            'tanggal_dibuat' : playlist['tanggal_dibuat'],
            'id' : playlist['id_user_playlist'],
        })
    context = {
        'playlists': res_playlist,
        'navbar': get_navbar_info(request)        
    }
    return render(request, 'playlist/playlist_list.html', context)

@csrf_exempt
def playlist_create(request):
    user = get_session_info(request)
    if not user:
        return redirect('main:login')
    if request.method == 'POST':
        user = get_session_info(request)
        email = user['email']
        name = request.POST['judul']
        description = request.POST['deskripsi']
        new_id = str(uuid.uuid4())
        playlist_id = str(uuid.uuid4())
        current_date = datetime.now().strftime('%Y-%m-%d')

        #inser playlist baru
        query_string = f"""
            INSERT INTO PLAYLIST (id)
            VALUES ('{playlist_id}');
        """

        #insert user_playlist baru
        query_string += f"""
            INSERT INTO USER_PLAYLIST (email_pembuat, id_user_playlist, judul, deskripsi, jumlah_lagu, tanggal_dibuat, id_playlist, total_durasi)
            VALUES ('{email}', '{new_id}', '{name}', '{description}', 0, '{current_date}', '{playlist_id}', 0);
            """

        res = query(query_string)
        if res == 1:
            return redirect('playlist_list')
        
        else:
            print(res)
            return HttpResponseNotFound('Failed to create playlist')
    context = {'ubah': False, 'navbar': get_navbar_info(request)}
    return render(request, 'playlist/playlist_form.html', context)

@csrf_exempt
def playlist_detail(request, playlist_id):
    user = get_session_info(request)
    if not user:
        return redirect('main:login')
    id_user_playlist = playlist_id
    query_string = f"""
        SELECT *
        FROM USER_PLAYLIST up
        JOIN AKUN a ON up.email_pembuat = a.email
        WHERE up.id_user_playlist = '{id_user_playlist}';        
    """
    playlist = query(query_string)[0]
    print(playlist)
    query_string = f"""
        SELECT * FROM 
        (SELECT * FROM SONG WHERE id_konten IN 
            (SELECT id_song FROM PLAYLIST_SONG WHERE id_playlist = '{playlist['id_playlist']}')) AS LAGU
        JOIN
        (SELECT id, judul AS judul_lagu, tanggal_rilis, tahun, durasi FROM KONTEN) AS CONTENT
        ON LAGU.id_konten = CONTENT.id
        JOIN
        (SELECT id AS artist_id, email_akun FROM ARTIST) AS ARTIST ON LAGU.id_artist = ARTIST.artist_id
        JOIN
        (SELECT email, nama FROM AKUN) AS AKUN ON ARTIST.email_akun = AKUN.email;
    """
    songs = query(query_string)
    
    songs_data = []
    total_hours = playlist['total_durasi'] // 60
    total_minutes = playlist['total_durasi'] % 60
    for song in songs:
        songs_data.append({
            'title': song['judul_lagu'],
            'artist': song['nama'],
            'duration': song['durasi'],
            'id_song': song['id_konten']
        })
    
    playlist_data = {
        'id': playlist['id_user_playlist'],
        'title': playlist['judul'],
        'creator': playlist['nama'],
        'songs': songs_data,
        'total_duration_hours': total_hours,
        'total_duration_minutes': total_minutes,
        'created_date': playlist['tanggal_dibuat'],
        'description': playlist['deskripsi'],

    }
    context = {
        'playlist': playlist_data,
        'navbar': get_navbar_info(request)
    }
    return render(request, 'playlist/playlist_detail.html', context)

@csrf_exempt
def remove_song_from_playlist(request, playlist_id, song_id):
    user = get_session_info(request)
    if not user:
        return redirect('main:login')
    query_string = f"""
        DELETE FROM PLAYLIST_SONG
        WHERE id_playlist = 
        (SELECT id_playlist FROM USER_PLAYLIST WHERE id_user_playlist = '{playlist_id}')  AND id_song = '{song_id}';
    """
    res = query(query_string)
    print(res)
    print(query_string)
    if res == 1:
        return redirect('playlist_detail', playlist_id=playlist_id)
    else:
        return HttpResponseNotFound('Failed to remove song from playlist')
    

@csrf_exempt
def add_song_to_playlist(request, playlist_id):
    user = get_session_info(request)
    if not user:
        return redirect('main:login')
    if request.method == 'POST':
        user = get_session_info(request)
        email = user['email']
        song_id = request.POST['lagu']  # Changed to match the form field name

        playlist_id_riil = query(f"""
            SELECT id_playlist FROM USER_PLAYLIST WHERE id_user_playlist = '{playlist_id}';
        """)[0]['id_playlist']
        query_string = f"""
            INSERT INTO PLAYLIST_SONG (id_playlist, id_song)
            VALUES ('{playlist_id_riil}', '{song_id}');
        """
        
        res = query(query_string)
        if res == 1:
            return redirect('playlist_detail', playlist_id=playlist_id)
        else:
            print(res)
            return redirect('add_song_to_playlist', playlist_id=playlist_id)

    all_songs = query(f"""
        SELECT judul, nama, id_konten FROM SONG
        JOIN KONTEN ON SONG.id_konten = KONTEN.id
        JOIN ARTIST ON SONG.id_artist = ARTIST.id
        JOIN AKUN ON ARTIST.email_akun = AKUN.email;
    """)

    songs_data = []
    for song in all_songs:
        songs_data.append({
            'judul': song['judul'],
            'artist': song['nama'],
            'id': song['id_konten']
        })

    context = {
        'songs': songs_data,
        'id': playlist_id,  # Ensuring the correct context variable is passed
        'navbar': get_navbar_info(request) # Added navbar info to context
    }
    return render(request, 'playlist/add_song_to_playlist.html', context)

def playlist_update(request, playlist_id):
    user = get_session_info(request)
    if not user:
        return redirect('main:login')
    if request.method == 'POST':
        user = get_session_info(request)
        email = user['email']
        name = request.POST['judul']
        description = request.POST['deskripsi']

        query_string = f"""
            UPDATE USER_PLAYLIST
            SET judul = '{name}', deskripsi = '{description}'
            WHERE id_user_playlist = '{playlist_id}';
        """

        res = query(query_string)
        if res == 1:
            return redirect('playlist_list')
        else:
            return HttpResponseNotFound('Failed to update playlist')
    context = {'ubah': True, 'id' : playlist_id  , 'navbar': get_navbar_info(request)}
    return render(request, 'playlist/playlist_form.html', context)

@csrf_exempt
def playlist_delete(request, playlist_id):
    user = get_session_info(request)
    if not user:
        return redirect('main:login')
    user_playlist_id = playlist_id
    playlist_id = query(f"""
        SELECT id_playlist FROM USER_PLAYLIST WHERE id_user_playlist = '{user_playlist_id}';
    """)

    playlist_id = playlist_id[0]['id_playlist']
    query_string = f"""
        DELETE FROM PLAYLIST_SONG
        WHERE id_playlist = '{playlist_id}';
    """
    query_string += f"""
        DELETE FROM AKUN_PLAY_USER_PLAYLIST
        WHERE id_user_playlist = '{user_playlist_id}';
    """
    query_string += f"""
        DELETE FROM USER_PLAYLIST
        WHERE id_user_playlist = '{user_playlist_id}';
    """
    query_string += f"""
        DELETE FROM PLAYLIST
        WHERE id = '{playlist_id}';
    """


    res = query(query_string)
    if res == 1:
        return redirect('playlist_list')
    else:
        print(res)
        return HttpResponseNotFound('Failed to delete playlist')

# def playlist_update(request, playlist_id):
#     playlist = get_object_or_404(Playlist, id=playlist_id, user=request.user)
#     if request.method == 'POST':
#         form = PlaylistForm(request.POST, instance=playlist)
#         if form.is_valid():
#             form.save()
#             return redirect('playlist_list')
#     else:
#         form = PlaylistForm(instance=playlist)
#     return render(request, 'playlist/playlist_form.html', {'form': form})

# def playlist_delete(request, playlist_id):
#     playlist = get_object_or_404(Playlist, id=playlist_id, user=request.user)
#     playlist.delete()
#     return redirect('playlist_list')

# def add_song_to_playlist(request, playlist_id):
#     playlist = get_object_or_404(Playlist, id=playlist_id, user=request.user)
#     if request.method == 'POST':
#         form = UserPlaylistForm(request.POST)
#         if form.is_valid():
#             user_playlist = form.save(commit=False)
#             user_playlist.playlist = playlist
#             user_playlist.save()
#             return redirect('playlist_detail', playlist_id=playlist_id)
#     else:
#         form = UserPlaylistForm()
#     return render(request, 'playlist/add_song_to_playlist.html', {'form': form, 'playlist': playlist})

# def remove_song_from_playlist(request, playlist_id, song_id):
#     playlist = get_object_or_404(Playlist, id=playlist_id, user=request.user)
#     song = get_object_or_404(Song, id=song_id)
#     UserPlaylist.objects.filter(playlist=playlist, song=song).delete()
#     return redirect('playlist_detail', playlist_id=playlist_id)

# def search(request):
#     query = request.GET.get('query')
    
#     if query:
#         songs = Song.objects.filter(title__icontains=query)
#         podcasts = podcast.objects.filter(title__icontains=query)
#         user_playlists = UserPlaylist.objects.filter(title__icontains=query)
        
#         results = []
#         for song in songs:
#             results.append({
#                 'type': 'SONG',
#                 'title': song.title,
#                 'by': song.artist,
#                 'url': reverse('song_detail', args=[song.id])
#             })
#         for podcast in podcasts:
#             results.append({
#                 'type': 'PODCAST',
#                 'title': podcast.title,
#                 'by': podcast.podcaster,
#                 'url': reverse('podcast_detail', args=[podcast.id])
#             })
#         for playlist in user_playlists:
#             results.append({
#                 'type': 'USER PLAYLIST',
#                 'title': playlist.title,
#                 'by': playlist.user.username,
#                 'url': reverse('playlist_detail', args=[playlist.id])
#             })
#     else:
#         results = []
    
#     context = {
#         'query': query,
#         'results': results
#     }
#     return render(request, 'main/search_results.html', context)


playlist\__init__.py:



main\admin.py:
from django.contrib import admin

# Register your models here.



main\apps.py:
from django.apps import AppConfig


class MainConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "main"



main\forms.py:



main\lmao.py:
from collections import namedtuple
import psycopg2
from psycopg2 import Error
from psycopg2.extras import RealDictCursor



try:
    connection = psycopg2.connect(user="postgres.tutzylpjrcjropovgoly",
                        password="eqRvUiBE4LZlukUp",
                        host="aws-0-ap-southeast-1.pooler.supabase.com",
                        port="5432",
                        database="postgres")

    # Create a cursor to perform database operations
    connection.autocommit = True
    cursor = connection.cursor()
except (Exception, Error) as error:
    print("Error while connecting to PostgreSQL", error)


def map_cursor(cursor):
    "Return all rows from a cursor as a namedtuple"
    desc = cursor.description
    nt_result = namedtuple("Result", [col[0] for col in desc])
    return [dict(row) for row in cursor.fetchall()]


def query(query_str: str):
    hasil = []
    with connection.cursor(cursor_factory=RealDictCursor) as cursor:
        cursor.execute("SET SEARCH_PATH TO PUBLIC")
        try:
            cursor.execute(query_str)

            if query_str.strip().upper().startswith("SELECT"):
                # Kalau ga error, return hasil SELECT
                hasil = map_cursor(cursor)
            else:
                # Kalau ga error, return jumlah row yang termodifikasi oleh INSERT, UPDATE, DELETE
                hasil = cursor.rowcount
                connection.commit()
        except Exception as e:
            # Ga tau error apa
            hasil = "error :\n" + str(e)

    return hasil

email = "ganjar@pranowo.com"
id_konten = "f178a9c2-9054-4fe2-8972-77abc0998131"
# email_exists = query(f"""
#     SELECT * FROM 
#         (SELECT * FROM SONG WHERE id_konten = '{id_konten}') AS LAGU 
#         NATURAL JOIN 
#         (SELECT judul AS judul_lagu, tanggal_rilis, tahun, durasi FROM KONTEN WHERE id = '{id_konten}') AS CONTENT
#         JOIN
#         (SELECT id AS album_id, judul AS judul_album FROM ALBUM) AS ALBUM ON LAGU.id_album = ALBUM.album_id
#         JOIN 
#         (SELECT id AS artist_id, email_akun FROM ARTIST) AS ARTIST ON LAGU.id_artist = ARTIST.artist_id
#         JOIN
#         (SELECT email, nama FROM AKUN) AS AKUN ON ARTIST.email_akun = AKUN.email;
#     """)
# print(email_exists)
# songwriters = query(f"""
#     SELECT nama FROM AKUN WHERE email IN 
#         (SELECT email_akun FROM SONGWRITER WHERE id IN
#             (SELECT id_songwriter FROM SONGWRITER_WRITE_SONG WHERE id_song = '{id_konten}')
#         )
# """)

# print(songwriters)

# songwriters = [sw['nama'] for sw in songwriters]

# print(songwriters)

id_user_playlist = "05a104c1-e02b-4dff-bfc1-d52c92ba6ed2"
query_string = f"""
    SELECT *
    FROM USER_PLAYLIST up
    JOIN AKUN a ON up.email_pembuat = a.email
    WHERE up.id_user_playlist = '{id_user_playlist}';        
"""
playlist = query(query_string)[0]
# query_string = f"""
#     SELECT * FROM 
#     (SELECT * FROM SONG WHERE id_konten IN
#         (SELECT id_song FROM PLAYLIST_SONG WHERE id_playlist = '{playlist['id_playlist']}')) AS LAGU
#     JOIN
#     (SELECT id, judul AS judul_lagu, tanggal_rilis, tahun, durasi FROM KONTEN) AS CONTENT
#     ON LAGU.id_konten = CONTENT.id
#     JOIN
#     (SELECT id AS artist_id, email_akun FROM ARTIST) AS ARTIST ON LAGU.id_artist = ARTIST.artist_id
        
# """
# songs = query(query_string)
# for song in songs:
#     print(song)
#     print("=========")
# print(len(songs))
print(playlist)
print([1,2,3]+[4,5,6])


main\models.py:
from django.db import models
from django.contrib.auth.models import User

class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    birth_date = models.DateField()
    city = models.CharField(max_length=100)
    is_artist = models.BooleanField(default=False)
    is_songwriter = models.BooleanField(default=False)
    is_podcaster = models.BooleanField(default=False)

    def __str__(self):
        return self.user.username

class LabelProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    contact = models.CharField(max_length=100)

    def __str__(self):
        return self.user.username



main\tests.py:
from django.test import TestCase, Client

class mainTest(TestCase):
    def test_main_url_is_exist(self):
        response = Client().get('/main/')
        self.assertEqual(response.status_code, 200)

    def test_main_using_main_template(self):
        response = Client().get('/main/')
        self.assertTemplateUsed(response, 'main.html')


main\urls.py:
from django.urls import path
from main.views import show_main
from main.views import show_main,  play_song, play_user_playlist, register_user, register_label, home, login_and_register
from main.views import register , dashboard
from main.views import login_user
from main.views import logout_user
from main.views import search
from main.views import createpod
from .views import createpodepisode
from main.views import seechart
from main.views import daily
from main.views import weekly
from main.views import monthly
from main.views import yearly
from main.views import podetail
from main.views import download_song, add_song_to_playlist, user_play_song, shuffle_playlist

app_name = 'main'

urlpatterns = [
    path('', show_main, name='show_main'),
    path('register/', register, name='register'),
    path('login/', login_user, name='login'),
    path('logout/', logout_user, name='logout'),
    path('search/', search, name='search'),
    path('play-song/<str:id>/', play_song, name='play_song'),
    path('play-user-playlist/<str:id>/', play_user_playlist, name='play_user_playlist'),    
    path('createpod.html/', createpod, name='createpod'),
    path('createpod.html/createpod_episode.html/', createpodepisode, name='createpodepisode'),
    path('podetail.html/', podetail, name='podetail'),
    path('seechart.html/', seechart, name='seechart'),
    path('seechart.html/daily.html', daily, name='daily'),
    path('seechart.html/weekly.html', weekly, name='weekly'),
    path('seechart.html/monthly.html', monthly, name='monthly'),
    path('seechart.html/yearly.html', yearly, name='yearly'),
    path('register/user/', register_user, name='register_user'),
    path('register/label/', register_label, name='register_label'),
    path('home/', home, name='home'),
    path('login_and_register/', login_and_register, name='login_and_register'),
    path('dashboard/', dashboard, name='dashboard'),
    path('download-song/<str:id>/', download_song, name='download_song'),
    path('add-song-to-playlist/', add_song_to_playlist, name='add_song_to_playlist'),
    path('user-play-song/<str:id>/', user_play_song, name='user_play_song'),
    path('shuffle-playlist/<str:id>/', shuffle_playlist, name='shuffle_playlist')
]


main\views.py:
from django.shortcuts import render
from django.http import HttpResponseNotFound, HttpResponseRedirect
from django.urls import reverse
from django.http import HttpResponse
from django.core import serializers
from django.shortcuts import redirect
from django.contrib.auth.forms import UserCreationForm
from django.contrib import messages  
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
import datetime
from django.http import HttpResponseRedirect
from django.urls import reverse
from django.views.decorators.csrf import csrf_exempt

from django.shortcuts import render, redirect
from django.contrib.auth.models import User
from django.contrib.auth import login
from django.contrib.auth.hashers import make_password
from django.contrib.auth.models import User
from connector.query import query, get_session_info, get_navbar_info
import uuid
from django.http import HttpResponseRedirect
from django.urls import reverse


@csrf_exempt
def show_main(request):
    return redirect('main:login_and_register')

@csrf_exempt
def register_user(request):
    if request.method == 'POST':
        email = request.POST.get('email')
        password = request.POST.get('password')
        name = request.POST.get('name')
        gender = 1 if request.POST.get('gender') == "male" else 0
        birth_place = request.POST.get('birthplace')
        birth_date = request.POST.get('birthdate')
        city = request.POST.get('city')
        is_artist = 'True' == request.POST.get('is_artist')
        is_songwriter = 'True' == request.POST.get('is_songwriter')
        is_podcaster = 'True' == request.POST.get('is_podcaster')
        
        #CEK APAKAH EMAIL SUDAH TERDAFTAR
        is_verified = is_artist or is_songwriter or is_podcaster 
        pemilik_hak_cipta_id = str(uuid.uuid4())

        query_string = f"""
                INSERT INTO AKUN (email, password, nama, gender, tempat_lahir, tanggal_lahir, is_verified, kota_asal)
                VALUES ('{email}', '{password}', '{name}', {gender}, '{birth_place}', '{birth_date}', {is_verified}, '{city}');
            """
        
        if is_podcaster:
            query_string += f"""
                INSERT INTO PODCASTER (email)
                VALUES ('{email}');
            """
        
        if is_artist or is_songwriter:
            # Insert pemilik hak cipta
            rate_royalti = 0
            query_string += f"""
                INSERT INTO PEMILIK_HAK_CIPTA (id, rate_royalti)
                VALUES ('{pemilik_hak_cipta_id}', {rate_royalti});
            """

        if is_artist:
            artist_uuid = str(uuid.uuid4())
            
            # Insert artist
            query_string += f"""
                INSERT INTO ARTIST (id, email_akun, id_pemilik_hak_cipta)
                VALUES ('{artist_uuid}', '{email}', '{pemilik_hak_cipta_id}');
            """
            
        if is_songwriter:
            songwriter_uuid = str(uuid.uuid4())
            
            
            query_string += f"""
                INSERT INTO SONGWRITER (id, email_akun, id_pemilik_hak_cipta)
                VALUES ('{songwriter_uuid}', '{email}', '{pemilik_hak_cipta_id}');
            """

        res = query(query_string)
        print("cok", res)
        
        if "error" in str(res):
            messages.error(request, 'An error occurred while registering your account. Please try again later.')
            print(res)
        else:
            messages.success(request, 'Registration successful!')
            return redirect('main:login')  
    context = {
        'navbar' : get_navbar_info(request)
    }
    return render(request, 'register_user.html', context)

@csrf_exempt
def register_label(request):
    if request.method == 'POST':
        email = request.POST.get('email')
        password = request.POST.get('password')
        contact = request.POST.get('contact')
        name = request.POST.get('name')
        label_uuid = str(uuid.uuid4())
        pemilik_hak_cipta_id = str(uuid.uuid4())
        
        #CEK APAKAH EMAIL SUDAH TERDAFTAR
        

        # Insert pemilik hak cipta
        rate_royalti = 0
        query_string = f"""
            INSERT INTO PEMILIK_HAK_CIPTA (id, rate_royalti)
            VALUES ('{pemilik_hak_cipta_id}', {rate_royalti});
        """

        # Insert label
        query_string += f"""
                INSERT INTO label (id, nama, email, password, kontak, id_pemilik_hak_cipta) VALUES
                ('{label_uuid}', '{name}', '{email}', '{password}', '{contact}', '{pemilik_hak_cipta_id}');
        """

        res = query(query_string)

        if "error" in str(res):
            if("Email sudah terdaftar" in str(res)):
                messages.error(request, 'Email is already registered!')
            else:
                messages.error(request, 'An error occurred while registering your account. Please try again later.')
            print(res)
        else:
            messages.success(request, 'Registration successful!')
            return redirect('main:login')  # Redirect to a home or profile page
    context = {
        'navbar' : get_navbar_info(request)
    }
    return render(request, 'register_label.html', context)
@csrf_exempt
def register(request):
    # Simply render the choice page without any logic for POST methods
    context = {
        'navbar' : get_navbar_info(request)
    }
    return render(request, 'register.html', context)
@csrf_exempt
def login_and_register(request):
    context = {
        'navbar' : get_navbar_info(request)
    }
    return render(request, 'login_and_register.html', context)
@csrf_exempt
def login_user(request):
    if request.method == 'POST':
        email = request.POST.get('email')
        password = request.POST.get('password')
        user = query(f"SELECT email FROM AKUN WHERE email = '{email}' AND password = '{password}'")
        
        if len(user) == 0:
            messages.error(request, 'Invalid email or password!')
        else:
            query("CALL periksa_dan_ubah_status_langganan()")
            
            is_artist = len(query(f"SELECT * FROM ARTIST WHERE email_akun = '{email}'")) != 0
            is_songwriter = len(query(f"SELECT * FROM SONGWRITER WHERE email_akun = '{email}'")) != 0
            is_podcaster = len(query(f"SELECT * FROM PODCASTER WHERE email = '{email}'")) != 0
            is_premium = len(query(f"SELECT * FROM PREMIUM WHERE email = '{email}'")) != 0
            is_label = len(query(f"SELECT * FROM LABEL WHERE email = '{email}'")) != 0

            session_id = str(uuid.uuid4())
            temp = query(f"""INSERT INTO SESSIONS (session_id, email, is_label, is_premium, is_artist, is_songwriter, is_podcaster) 
                  VALUES ('{session_id}', '{email}' , {is_label}, {is_premium}, {is_artist}, {is_songwriter}, {is_podcaster})
                """)
            

            response = redirect('main:dashboard')
            response.set_cookie('session_id', session_id)
            return response
    context = {
        'navbar': get_navbar_info(request)
    }
    return render(request, 'login.html', context)

@csrf_exempt
def logout_user(request):
    session_id = request.COOKIES.get('session_id')
    if session_id:
        query(f"DELETE FROM SESSIONS WHERE session_id = '{session_id}'")  # Delete session from database


    response = HttpResponseRedirect(reverse('main:login'))
    response.delete_cookie('session_id')  # Delete session_id cookie
    return response

@csrf_exempt
def play_song(request, id):
    user = get_session_info(request)
    if not user:
        return redirect('main:login')
    id_konten = id
    query_string = f"""
    SELECT * FROM 
        (SELECT * FROM SONG WHERE id_konten = '{id_konten}') AS LAGU 
        NATURAL JOIN 
        (SELECT judul AS judul_lagu, tanggal_rilis, tahun, durasi FROM KONTEN WHERE id = '{id_konten}') AS CONTENT
        JOIN
        (SELECT id AS album_id, judul AS judul_album FROM ALBUM) AS ALBUM ON LAGU.id_album = ALBUM.album_id
        JOIN 
        (SELECT id AS artist_id, email_akun FROM ARTIST) AS ARTIST ON LAGU.id_artist = ARTIST.artist_id
        JOIN
        (SELECT email, nama FROM AKUN) AS AKUN ON ARTIST.email_akun = AKUN.email;
    """
    
    genre = query(f"SELECT genre FROM GENRE WHERE id_konten = '{id_konten}'")
    genre = [g['genre'] for g in genre]

    songwriters = query(f"""
        SELECT nama FROM AKUN WHERE email IN 
            (SELECT email_akun FROM SONGWRITER WHERE id IN
                (SELECT id_songwriter FROM SONGWRITER_WRITE_SONG WHERE id_song = '{id_konten}')
            )
    """)

    songwriters = [sw['nama'] for sw in songwriters]

    user_playlist = query(f"SELECT * FROM USER_PLAYLIST WHERE email_pembuat = '{user['email']}'")
    user_playlist = [{'id': p['id_user_playlist'], 'title': p['judul']} for p in user_playlist]

    is_downloaded = query(f"SELECT * FROM DOWNLOADED_SONG WHERE id_song = '{id_konten}' AND email_downloader = '{user['email']}'")
    is_downloaded = len(is_downloaded) > 0

    konten = query(query_string)[0]    

    song_data = {
        'id': konten['id_konten'],
        'title': konten['judul_lagu'],
        'genres': genre,
        'artist': konten['nama'],
        'songwriters': songwriters,
        'duration': konten['durasi'],  
        'release_date': konten['tanggal_rilis'],
        'year': konten['tahun'],
        'album': konten['judul_album'],
        'total_plays': konten['total_play'],  
        'total_downloads': konten['total_download'],  
        'user_playlists': user_playlist,
        'is_downloaded': is_downloaded,
    }
    context = {
        'song': song_data,
        'user': request.user,
        'user_is_premium': user['is_premium'],
        'navbar' : get_navbar_info(request),
    }
    return render(request, 'play_song.html', context)
@csrf_exempt
def download_song(request, id):
    user = get_session_info(request)
    if not user:
        return redirect('main:login')
    email = user['email']
    id_konten = id
    query_string = f"""
        INSERT INTO DOWNLOADED_SONG (id_song, email_downloader) VALUES ('{id_konten}', '{email}');
    """
    res = query(query_string)
    if "error" in str(res):
        return HttpResponseNotFound("Download Failed")
    else:
        return HttpResponse("Song downloaded successfully!")
@csrf_exempt
def add_song_to_playlist(request):
    id_song = request.POST.get('id_song')
    id_playlist = request.POST.get('id_playlist')

    query_string = f"""
        INSERT INTO PLAYLIST_SONG (id_playlist, id_song) VALUES ((SELECT id_playlist FROM USER_PLAYLIST WHERE id_user_playlist = '{id_playlist}'), '{id_song}');
    """
    res = query(query_string)
    print(res)
    if "error" in str(res):
        return HttpResponseNotFound("Failed to add song to playlist")
    else:
        return redirect('main:play_user_playlist', id=id_playlist)
@csrf_exempt
def user_play_song(request, id):
    user = get_session_info(request)
    if not user:
        return redirect('main:login')
    id_konten = id
    waktu = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    query_string = f"""
        INSERT INTO AKUN_PLAY_SONG (email_pemain, id_song, waktu) VALUES ('{user['email']}', '{id_konten}', '{waktu}');
    """
    res = query(query_string)
    print(res)
    if "error" in str(res):
        return HttpResponseNotFound("Failed to play song")
    else:
        return HttpResponse("Song played successfully!")

@csrf_exempt
def play_user_playlist(request, id):
    user = get_session_info(request)
    if not user:
        return redirect('main:login')
    id_user_playlist = id
    query_string = f"""
        SELECT *
        FROM USER_PLAYLIST up
        JOIN AKUN a ON up.email_pembuat = a.email
        WHERE up.id_user_playlist = '{id_user_playlist}';        
    """
    playlist = query(query_string)[0]
    query_string = f"""
        SELECT * FROM 
        (SELECT * FROM SONG WHERE id_konten IN 
            (SELECT id_song FROM PLAYLIST_SONG WHERE id_playlist = '{playlist['id_playlist']}')) AS LAGU
        JOIN
        (SELECT id, judul AS judul_lagu, tanggal_rilis, tahun, durasi FROM KONTEN) AS CONTENT
        ON LAGU.id_konten = CONTENT.id
        JOIN
        (SELECT id AS artist_id, email_akun FROM ARTIST) AS ARTIST ON LAGU.id_artist = ARTIST.artist_id
        JOIN
        (SELECT email, nama FROM AKUN) AS AKUN ON ARTIST.email_akun = AKUN.email;
    """
    songs = query(query_string)
    
    songs_data = []
    total_hours = playlist['total_durasi'] // 60
    total_minutes = playlist['total_durasi'] % 60
    for song in songs:
        songs_data.append({
            'title': song['judul_lagu'],
            'artist': song['nama'],
            'duration': song['durasi'],
            'id_song': song['id_konten']
        })
    
    playlist_data = {
        'id': playlist['id_user_playlist'],
        'title': playlist['judul'],
        'creator': playlist['nama'],
        'songs': songs_data,
        'total_duration_hours': total_hours,
        'total_duration_minutes': total_minutes,
        'created_date': playlist['tanggal_dibuat'],
        'description': playlist['deskripsi']
    }
    print(playlist_data)
    context = {
        'playlist': playlist_data,
        'navbar' : get_navbar_info(request),
    }
    
    return render(request, 'play_user_playlist.html', context)

@csrf_exempt
def shuffle_playlist(request, id):
    id_user_playlist = id

    user = get_session_info(request)
    if not user:
        return redirect('main:login')
    player = user['email']
    query_string = f"""
        
        INSERT INTO AKUN_PLAY_USER_PLAYLIST (email_pemain, id_user_playlist, email_pembuat, waktu)
        SELECT '{player}', id_user_playlist, email_pembuat, current_timestamp
        FROM USER_PLAYLIST
        WHERE id_user_playlist = '{id_user_playlist}';

        
        INSERT INTO AKUN_PLAY_SONG (email_pemain, id_song, waktu)
        SELECT 
            '{player}' AS email_pemain, 
            ps.id_song AS id_song, 
            current_timestamp AS waktu
        FROM 
            PLAYLIST_SONG ps
        JOIN 
            USER_PLAYLIST up ON ps.id_playlist = up.id_playlist
        WHERE 
            up.id_user_playlist = '{id_user_playlist}';
    """
    res = query(query_string)

    if "error" in str(res):
        return HttpResponseNotFound("Failed to shuffle playlist")
    else:
        return HttpResponse("Playlist shuffled successfully!")


def search(request):
    query_str = request.GET.get('query')
    
    results = []
    
    if query_str:
        songs = query(f"""
            SELECT k.id, k.judul AS title, string_agg(distinct g.genre, ', ') AS genre, ak.nama AS artist_name
            FROM KONTEN k
            JOIN SONG s ON k.id = s.id_konten
            JOIN GENRE g ON k.id = g.id_konten
            JOIN ARTIST a ON s.id_artist = a.id
            JOIN AKUN ak ON a.email_akun = ak.email
            WHERE k.judul ILIKE '%{query_str}%'
            GROUP BY k.id, k.judul, ak.nama
        """)
        
        for song in songs:
            results.append({
                'type': 'SONG',
                'title': song['title'],
                'genre': song['genre'],
                'by': song['artist_name'],
                'url': reverse('song_detail', args=[song['id']])
            })
    
    context = {
        'query': query_str,
        'results': results
    }
    return render(request, 'search_results.html', context)


def createpod(request):
    # Logika untuk menampilkan halaman createpod.html
    return render(request, 'createpod.html')


def createpodepisode(request):
    # Logika untuk menampilkan halaman createpod.html
    return render(request, 'createpod_episode.html')

def seechart(request):
    # Logika untuk menampilkan halaman createpod.html
    return render(request, 'seechart.html')

def daily(request):
    return render(request, 'daily.html')

def weekly(request):
    return render(request, 'weekly.html')

def monthly(request):
    return render(request, 'monthly.html')

def yearly(request):
    return render(request, 'yearly.html')


def podetail(request):
    return render(request, "podcastdetail.html")

@csrf_exempt
def home(request):
    #redirect to login and register
    return redirect('main:login_and_register')



@csrf_exempt
def dashboard(request):
    # Get user from session
    ses_info = get_session_info(request)
    email = ses_info['email']
    if not email:
        return redirect('main:login')
    
    user = query(f"SELECT * FROM AKUN WHERE email = '{email}'")[0]
    if ses_info['is_label']:
        user = query(f"SELECT * FROM LABEL WHERE email = '{email}'")[0]
    
    roles = []
    if ses_info['is_label']:
        roles.append("Label")
    if ses_info['is_artist']:
        roles.append("Artist")
    if ses_info['is_songwriter']:
        roles.append("Songwriter")
    if ses_info['is_podcaster']:
        roles.append("Podcaster")
    roles.append("Pengguna")
    role_str = ", ".join(roles)

    if ses_info['is_label']:
        album_list = query(f"SELECT * FROM ALBUM JOIN LABEL ON ALBUM.id_label = LABEL.id WHERE LABEL.email = '{email}'")
        album_list = [{'title': album['judul'], 'release_date': album['tanggal_rilis']} for album in album_list]
    else:
        album_list = []

    if ses_info['is_podcaster']:
        podcasts = query(f"SELECT * FROM PODCAST JOIN KONTEN ON PODCAST.id_konten = KONTEN.id WHERE PODCAST.email_podcaster = '{email}'")
        podcasts = [{'title': podcast['judul'], 'release_date': podcast['tanggal_rilis'], 'durasi': podcast['durasi']} for podcast in podcasts]
    else:
        podcasts = []
    
    if ses_info['is_artist']:
        songs_artist = query(f"SELECT judul, tanggal_rilis, durasi  FROM SONG JOIN KONTEN ON SONG.id_konten = KONTEN.id JOIN ARTIST ON ARTIST.id = SONG.id_artist WHERE ARTIST.email_akun = '{email}'")
        print(songs_artist)
        songs_artist = [{'title': song['judul'], 'release_date': song['tanggal_rilis'], 'durasi': song['durasi']} for song in songs_artist]
    else:
        songs_artist = []
    
    if ses_info['is_songwriter']:
        songs_songwriter = query(f"SELECT * FROM KONTEN WHERE KONTEN.id IN (SELECT id_song FROM SONGWRITER_WRITE_SONG WHERE SONGWRITER_WRITE_SONG.id_songwriter = (SELECT id FROM SONGWRITER WHERE email_akun = '{email}'))")
        songs_songwriter = [{'title': song['judul'], 'release_date': song['tanggal_rilis'], 'durasi': song['durasi']} for song in songs_songwriter]
    else:
        songs_songwriter = []
    
    songs = songs_artist + songs_songwriter

    playlists = query(f"""
        SELECT * FROM USER_PLAYLIST up
        JOIN AKUN a ON up.email_pembuat = a.email
        WHERE up.email_pembuat = '{email}';
    """)
    print(playlists)
    playlists = [{'title': playlist['judul'], 'created_at': playlist['tanggal_dibuat'], 'song_count': playlist['jumlah_lagu'], 'total_duration': playlist['total_durasi']} for playlist in playlists]

    user = {
        'name': user['nama'],
        'email': user['email'],
        'city': user['kota_asal'],
        'gender': user['gender'],
        'birth_place': user['tempat_lahir'],
        'birth_date': user['tanggal_lahir'],
        'role': role_str,
        'playlists': playlists,
        'songs': songs,
        'podcasts': podcasts,
        'albums': album_list,
    }

    context = {
        'user': user,
        'user_type': 'user',
        'navbar' : get_navbar_info(request),
    }
    return render(request, 'dashboard.html', context)



main\__init__.py:



connector\query.py:
from collections import namedtuple
import psycopg2
from psycopg2 import Error
from psycopg2.extras import RealDictCursor
from django.http import HttpRequest  # for the 'request' parameter


try:
    connection = psycopg2.connect(user="postgres.tutzylpjrcjropovgoly",
                        password="eqRvUiBE4LZlukUp",
                        host="aws-0-ap-southeast-1.pooler.supabase.com",
                        port="5432",
                        database="postgres")

    # Create a cursor to perform database operations
    connection.autocommit = True
    cursor = connection.cursor()
except (Exception, Error) as error:
    print("Error while connecting to PostgreSQL", error)


def map_cursor(cursor):
    "Return all rows from a cursor as a namedtuple"
    desc = cursor.description
    nt_result = namedtuple("Result", [col[0] for col in desc])
    return [dict(row) for row in cursor.fetchall()]


def query(query_str: str):
    hasil = []
    with connection.cursor(cursor_factory=RealDictCursor) as cursor:
        cursor.execute("SET SEARCH_PATH TO PUBLIC")
        try:
            cursor.execute(query_str)

            if query_str.strip().upper().startswith("SELECT"):
                # Kalau ga error, return hasil SELECT
                hasil = map_cursor(cursor)
            else:
                # Kalau ga error, return jumlah row yang termodifikasi oleh INSERT, UPDATE, DELETE
                hasil = cursor.rowcount
                connection.commit()
        except Exception as e:
            # Ga tau error apa
            hasil = "error :\n" + str(e)

    return hasil

def get_session_info(request):
    session_id = request.COOKIES.get('session_id')
    if session_id:
        user = query(f"SELECT * FROM SESSIONS WHERE session_id = '{session_id}'")
        if user:
            return user[0]
    return None

def get_navbar_info(request: HttpRequest):
    session_info = get_session_info(request)

    if session_info:
        return {
            'is_guest': False,
            'is_user': not session_info['is_label'],
            'is_artist': session_info['is_artist'],
            'is_songwriter': session_info['is_songwriter']  ,
            'is_podcaster': session_info['is_podcaster'],
            'is_premium': session_info['is_premium'],
            'is_label': session_info['is_label'],
        }
    else:
        return {
            'is_guest': True,
            'is_user': False,
            'is_artist': False,
            'is_songwriter': False,
            'is_podcaster': False,
            'is_premium': False,
            'is_label': False,
        }


main\templates\dashboard.html:
{% extends 'base.html' %}

{% block content %}
    <div class="container my-5">
        <h2 class="mb-4">Dashboard</h2>
        <div class="form-box">
            <div class="mb-3">
                <label class="form-label">Nama:</label>
                <p>{{ user.name }}</p>
            </div>
            <div class="mb-3">
                <label class="form-label">Email:</label>
                <p>{{ user.email }}</p>
            </div>

            {% if navbar.is_user %}
                <div class="mb-3">
                    <label class="form-label">Status Langganan:</label>
                    <p>{{ user.subscription_status }}</p>
                </div>
                <div class="mb-3">
                    <label class="form-label">Kota Asal:</label>
                    <p>{{ user.city }}</p>
                </div>
                <div class="mb-3">
                    <label class="form-label">Gender:</label>
                    <p>{{ user.gender }}</p>
                </div>
                <div class="mb-3">
                    <label class="form-label">Tempat Lahir:</label>
                    <p>{{ user.birth_place }}</p>
                </div>
                <div class="mb-3">
                    <label class="form-label">Tanggal Lahir:</label>
                    <p>{{ user.birth_date }}</p>
                </div>
                <div class="mb-3">
                    <label class="form-label">Role:</label>
                    <p>{{ user.role }}</p>
                </div>
            {% endif %}

            {% if navbar.is_label %}
                <div class="mb-3">
                    <label class="form-label">Kontak:</label>
                    <p>{{ user.contact }}</p>
                </div>
            {% endif %}

            {% if navbar.is_user %}
                <h4 class="mb-3">Daftar Playlist</h4>
                {% if user.playlists %}
                    <table class="table table-dark">
                        <thead>
                            <tr>
                                <th>Judul</th>
                                <th>Jumlah Lagu</th>
                                <th>Tanggal Dibuat</th>
                                <th>Total Durasi</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for playlist in user.playlists %}
                                <tr>
                                    <td>{{ playlist.title }}</td>
                                    <td>{{ playlist.song_count }}</td>
                                    <td>{{ playlist.created_at }}</td>
                                    <td>{{ playlist.total_duration }}</td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                {% else %}
                    <p>Belum Memiliki Playlist</p>
                {% endif %}
            {% endif %}

            {% if navbar.is_artist or navbar.is_songwriter %}
                <h4 class="mb-3">Daftar Lagu</h4>
                {% if user.songs %}
                    <table class="table table-dark">
                        <thead>
                            <tr>
                                <th>Judul</th>
                                <th>Tanggal Rilis</th>
                                <th>Durasi</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for song in user.songs %}
                                <tr>
                                    <td>{{ song.title }}</td>
                                    <td>{{ song.release_date }}</td>
                                    <td>{{ song.duration }}</td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                {% else %}
                    <p>Belum Memiliki Lagu</p>
                {% endif %}
            {% endif %}

            {% if navbar.is_podcaster %}
                <h4 class="mb-3">Daftar Podcast</h4>
                {% if user.podcasts %}
                    <table class="table table-dark">
                        <thead>
                            <tr>
                                <th>Judul</th>
                                <th>Tanggal Rilis</th>
                                <th>Durasi</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for podcast in user.podcasts %}
                                <tr>
                                    <td>{{ podcast.title }}</td>
                                    <td>{{ podcast.release_date }}</td>
                                    <td>{{ podcast.duration }}</td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                {% else %}
                    <p>Belum Memiliki Podcast</p>
                {% endif %}
            {% endif %}

            {% if navbar.is_label %}
                <h4 class="mb-3">Daftar Album</h4>
                {% if user.albums %}
                    <table class="table table-dark">
                        <thead>
                            <tr>
                                <th>Judul</th>
                                <th>Tanggal Rilis</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for album in user.albums %}
                                <tr>
                                    <td>{{ album.title }}</td>
                                    <td>{{ album.release_date }}</td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                {% else %}
                    <p>Belum Memproduksi Album</p>
                {% endif %}
            {% endif %}
        </div>
    </div>
{% endblock %}



main\templates\search_results.html:
{% extends 'base.html' %}

{% block content %}
<h2>Hasil Pencarian "{{ query }}"</h2>

{% if results %}
    <table class="table table-dark">
        <thead>
            <tr>
                <th>Tipe</th>
                <th>Judul</th>
                <th>Genre</th>
                <th>Oleh</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for result in results %}
                <tr>
                    <td>{{ result.type }}</td>
                    <td>{{ result.title }}</td>
                    <td>{{ result.genre }}</td>
                    <td>{{ result.by }}</td>
                    <td>
                        <a href="{{ result.url }}" class="btn btn-sm btn-info">Lihat</a>
                    </td>
                </tr>
            {% endfor %}
        </tbody>
    </table>
{% else %}
    <p>Maaf, pencarian untuk "{{ query }}" tidak ditemukan</p>
{% endif %}
{% endblock %}




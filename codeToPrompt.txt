ini adalah kode sekarang:

langganan\admin.py:
from django.contrib import admin

# Register your models here.



langganan\apps.py:
from django.apps import AppConfig


class LanggananConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'langganan'



langganan\models.py:
from django.db import models
from django.contrib.auth.models import User

class Paket(models.Model):
    jenis = models.CharField(max_length=50, primary_key=True)
    harga = models.IntegerField()

class Transaction(models.Model):
    id = models.BigAutoField(primary_key=True)
    jenis_paket = models.ForeignKey(Paket, on_delete=models.CASCADE)
    email = models.ForeignKey(User, on_delete=models.CASCADE)
    timestamp_dimulai = models.DateTimeField()
    timestamp_berakhir = models.DateTimeField()
    metode_bayar = models.CharField(max_length=50)
    nominal = models.IntegerField()


langganan\tests.py:
from django.test import TestCase

# Create your tests here.



langganan\urls.py:
from django.urls import path
from . import views

urlpatterns = [
    path('langganan_paket/', views.langganan_paket, name='langganan_paket'),
    path('riwayat_transaksi/', views.riwayat_transaksi, name='riwayat_transaksi'),
    path('pembayaran_paket/<str:jenis>/', views.pembayaran_paket, name='pembayaran_paket'),
    path('search/', views.search, name='search'),
]


langganan\views.py:
from django.shortcuts import render, redirect
from django.urls import reverse

from playlist.models import Song, UserPlaylist
from .models import Paket, Transaction
from django.contrib.auth.decorators import login_required
from django.utils import timezone

@login_required
def langganan_paket(request):
    paket_list = Paket.objects.all()
    context = {'paket_list': paket_list}
    return render(request, 'langganan/langganan_paket.html', context)

@login_required
def riwayat_transaksi(request):
    transaksi_list = Transaction.objects.filter(email=request.user).order_by('-timestamp_dimulai')
    context = {'transaksi_list': transaksi_list}
    return render(request, 'langganan/riwayat_transaksi.html', context)

@login_required
def pembayaran_paket(request, jenis):
    if request.method == 'POST':
        metode_bayar = request.POST.get('metode_bayar')
        paket = Paket.objects.get(jenis=jenis)
        # Proses pembayaran
        transaction = Transaction.objects.create(
            jenis_paket=paket,
            email=request.user,
            timestamp_dimulai=timezone.now(),
            timestamp_berakhir=timezone.now() + timezone.timedelta(days=30),  # Contoh: 30 hari
            metode_bayar=metode_bayar,
            nominal=paket.harga
        )
        return redirect('riwayat_transaksi')
    else:
        paket = Paket.objects.get(jenis=jenis)
        context = {'paket': paket}
        return render(request, 'langganan/pembayaran_paket.html', context)
    
def search(request):
    query = request.GET.get('query')
    
    if query:
        songs = Song.objects.filter(title__icontains=query)
        podcasts = podcast.objects.filter(title__icontains=query)
        user_playlists = UserPlaylist.objects.filter(title__icontains=query)
        
        results = []
        for song in songs:
            results.append({
                'type': 'SONG',
                'title': song.title,
                'by': song.artist,
                'url': reverse('song_detail', args=[song.id])
            })
        for podcast in podcasts:
            results.append({
                'type': 'PODCAST',
                'title': podcast.title,
                'by': podcast.podcaster,
                'url': reverse('podcast_detail', args=[podcast.id])
            })
        for playlist in user_playlists:
            results.append({
                'type': 'USER PLAYLIST',
                'title': playlist.title,
                'by': playlist.user.username,
                'url': reverse('playlist_detail', args=[playlist.id])
            })
    else:
        results = []
    
    context = {
        'query': query,
        'results': results
    }
    return render(request, 'main/search_results.html', context)


langganan\__init__.py:



langganan\templates\langganan\langganan_paket.html:
{% extends 'base.html' %}

{% block content %}
<h2>Langganan Paket</h2>
<table>
    <tr>
        <th>Jenis</th>
        <th>Harga</th>
        <th>Action</th>
    </tr>
    {% for paket in paket_list %}
    <tr>
        <td>{{ paket.jenis }}</td>
        <td>{{ paket.harga }}</td>
        <td><a href="{% url 'pembayaran_paket' paket.jenis %}">Berlangganan</a></td>
    </tr>
    {% endfor %}
</table>
<a href="{% url 'riwayat_transaksi' %}">Riwayat Transaksi</a>
{% endblock %}


langganan\templates\langganan\pembayaran_paket.html:
{% extends 'base.html' %}

{% block content %}
<h2>Pembayaran Paket</h2>
<p>Informasi Paket yang Ingin Dibeli:</p>
<table>
    <tr>
        <th>Jenis</th>
        <th>Harga</th>
    </tr>
    <tr>
        <td>{{ paket.jenis }}</td>
        <td>{{ paket.harga }}</td>
    </tr>
</table>
<form method="POST">
    {% csrf_token %}
    <label for="metode_bayar">Metode Pembayaran:</label>
    <select name="metode_bayar" id="metode_bayar">
        <option value="transfer_bank">Transfer Bank</option>
        <option value="kartu_kredit">Kartu Kredit</option>
        <option value="e_wallet">E-Wallet</option>
    </select>
    <br>
    <input type="submit" value="Submit">
</form>
{% endblock %}


langganan\templates\langganan\riwayat_transaksi.html:
{% extends 'base.html' %}

{% block content %}
<h2>Riwayat Transaksi Paket</h2>
<table>
    <tr>
        <th>Jenis</th>
        <th>Tanggal Dimulai</th>
        <th>Tanggal Berakhir</th>
        <th>Metode Pembayaran</th>
        <th>Nominal</th>
    </tr>
    {% for transaksi in transaksi_list %}
    <tr>
        <td>{{ transaksi.jenis_paket.jenis }}</td>
        <td>{{ transaksi.timestamp_dimulai }}</td>
        <td>{{ transaksi.timestamp_berakhir }}</td>
        <td>{{ transaksi.metode_bayar }}</td>
        <td>{{ transaksi.nominal }}</td>
    </tr>
    {% endfor %}
</table>
<a href="{% url 'langganan_paket' %}">Kembali</a>
{% endblock %}


main\admin.py:
from django.contrib import admin

# Register your models here.



main\apps.py:
from django.apps import AppConfig


class MainConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "main"



main\forms.py:



main\models.py:
from django.db import models
from django.contrib.auth.models import User

class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    birth_date = models.DateField()
    city = models.CharField(max_length=100)
    is_artist = models.BooleanField(default=False)
    is_songwriter = models.BooleanField(default=False)
    is_podcaster = models.BooleanField(default=False)

    def __str__(self):
        return self.user.username

class LabelProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    contact = models.CharField(max_length=100)

    def __str__(self):
        return self.user.username



main\tests.py:
from django.test import TestCase, Client

class mainTest(TestCase):
    def test_main_url_is_exist(self):
        response = Client().get('/main/')
        self.assertEqual(response.status_code, 200)

    def test_main_using_main_template(self):
        response = Client().get('/main/')
        self.assertTemplateUsed(response, 'main.html')


main\urls.py:
from django.urls import path
from main.views import show_main
from main.views import show_main,  play_song, play_user_playlist, register_user, register_label, home, login_and_register
from main.views import register , dashboard
from main.views import login_user
from main.views import logout_user
from main.views import search
from main.views import createpod
from .views import createpodepisode
from main.views import seechart
from main.views import daily
from main.views import weekly
from main.views import monthly
from main.views import yearly
from main.views import podetail

app_name = 'main'

urlpatterns = [
    path('', show_main, name='show_main'),
    path('register/', register, name='register'),
    path('login/', login_user, name='login'),
    path('logout/', logout_user, name='logout'),
    path('search/', search, name='search'),
    path('play-song/', play_song, name='play_song'),
    path('play-user-playlist/', play_user_playlist, name='play_user_playlist'),
    path('createpod.html/', createpod, name='createpod'),
    path('createpod.html/createpod_episode.html/', createpodepisode, name='createpodepisode'),
    path('podetail.html/', podetail, name='podetail'),
    path('seechart.html/', seechart, name='seechart'),
    path('seechart.html/daily.html', daily, name='daily'),
    path('seechart.html/weekly.html', weekly, name='weekly'),
    path('seechart.html/monthly.html', monthly, name='monthly'),
    path('seechart.html/yearly.html', yearly, name='yearly'),
    path('register/user/', register_user, name='register_user'),
    path('register/label/', register_label, name='register_label'),
    path('home/', home, name='home'),
    path('login_and_register/', login_and_register, name='login_and_register'),
    path('dashboard/', dashboard, name='dashboard'),
]


main\views.py:
from django.shortcuts import render
from django.http import HttpResponseNotFound, HttpResponseRedirect
from django.urls import reverse
from django.http import HttpResponse
from django.core import serializers
from django.shortcuts import redirect
from django.contrib.auth.forms import UserCreationForm
from django.contrib import messages  
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
import datetime
from django.http import HttpResponseRedirect
from django.urls import reverse
from django.views.decorators.csrf import csrf_exempt
from playlist.models import Song, UserPlaylist
from django.shortcuts import render, redirect
from django.contrib.auth.models import User
from django.contrib.auth import login
from .models import UserProfile, LabelProfile
from django.contrib.auth.hashers import make_password
from django.contrib.auth.models import User
from connector.query import query

def get_user_type(user):
    try:
        user_profile = user.userprofile
        if user_profile.is_artist:
            return 'artist'
        elif user_profile.is_songwriter:
            return 'songwriter'
        elif user_profile.is_podcaster:
            return 'podcaster'
        else:
            return 'user'
    except UserProfile.DoesNotExist:
        try:
            label_profile = user.labelprofile
            return 'label'
        except LabelProfile.DoesNotExist:
            return 'guest'

def show_main(request):
    return redirect('main:login_and_register')


def register_user(request):
    if request.method == 'POST':
        username = request.POST.get('email')
        password = make_password(request.POST.get('password'))
        user = User.objects.create(username=username, email=username, password=password)
        
        birth_date = request.POST.get('birthdate')
        city = request.POST.get('city')
        is_artist = 'Artist' in request.POST.get('role', [])
        is_songwriter = 'Songwriter' in request.POST.get('role', [])
        is_podcaster = 'Podcaster' in request.POST.get('role', [])
        
        UserProfile.objects.create(
            user=user,
            birth_date=birth_date,
            city=city,
            is_artist=is_artist,
            is_songwriter=is_songwriter,
            is_podcaster=is_podcaster
        )
        
        login(request, user)  # Automatically log in the new user
        return redirect('main:home')  # Redirect to a home or profile page

    return render(request, 'register_user.html')

def register_label(request):
    if request.method == 'POST':
        username = request.POST.get('email')
        password = make_password(request.POST.get('password'))
        user = User.objects.create(username=username, email=username, password=password)
        
        contact = request.POST.get('contact')
        
        LabelProfile.objects.create(
            user=user,
            contact=contact
        )
        
        login(request, user)  # Automatically log in the new user
        return redirect('main:home')  # Redirect to a home or profile page

    return render(request, 'register_label.html')

def register(request):
    # Simply render the choice page without any logic for POST methods
    return render(request, 'register.html')

def login_and_register(request):
    return render(request, 'login_and_register.html')

def login_user(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        user = authenticate(request, username=username, password=password)
        if user:
            login(request, user)
            response = redirect('main:show_main')
            response.set_cookie('last_login', str(datetime.datetime.now()))  # Set the time of last login
            return response
        else:
            messages.error(request, 'Invalid username or password')
    return render(request, 'login.html')

def logout_user(request):
    logout(request)
    response = HttpResponseRedirect(reverse('main:login'))
    response.delete_cookie('last_login')
    return response


def play_song(request):
    song_data = {
        'title': 'Blinding Lights',
        'genres': ['Pop', 'Synthwave'],
        'artist': 'The Weeknd',
        'songwriters': ['Abel Tesfaye', 'Ahmad Balshe', 'Jason Quenneville', 'Max Martin', 'Oscar Holter'],
        'duration': 3.22,  
        'release_date': '29/11/2019',
        'year': 2019,
        'album': 'After Hours',
        'total_plays': 2_700_000_000,  
        'total_downloads': 1_000_000  
    }

    return render(request, 'play_song.html', {'song': song_data, 'user': request.user, 'user_is_premium': True})


def play_user_playlist(request):
    songs_data = [
        {'id': 1, 'title': 'Shape of You', 'artist': 'Ed Sheeran', 'duration': '3 minutes 53 seconds', 'play_count': 0},
        {'id': 2, 'title': 'Blinding Lights', 'artist': 'The Weeknd', 'duration': '3 minutes 20 seconds', 'play_count': 0},
        {'id': 3, 'title': 'Rolling in the Deep', 'artist': 'Adele', 'duration': '3 minutes 48 seconds', 'play_count': 0},
        {'id': 4, 'title': 'Bad Guy', 'artist': 'Billie Eilish', 'duration': '3 minutes 14 seconds', 'play_count': 0},
        {'id': 5, 'title': 'Thriller', 'artist': 'Michael Jackson', 'duration': '5 minutes 57 seconds', 'play_count': 0}
    ]

    
    total_seconds = sum(int(song['duration'].split()[0]) * 60 + int(song['duration'].split()[2]) for song in songs_data)
    total_hours = total_seconds // 3600
    total_minutes = (total_seconds % 3600) // 60

    playlist_data = {
        'id': 101,
        'title': 'basdut',
        'creator': 'Lisan Al gaib',
        'songs': songs_data,
        'total_duration_hours': total_hours,
        'total_duration_minutes': total_minutes,
        'created_date': '2024-03-18',
        'description': 'A playlist featuring some of the biggest hits from various artists across genres.'
    }


    return render(request, 'play_user_playlist.html', {'playlist': playlist_data})

def search(request):
    query = request.GET.get('query')
    
    if query:
        songs = Song.objects.filter(title__icontains=query)
        podcasts = podcast.objects.filter(title__icontains=query)
        user_playlists = UserPlaylist.objects.filter(title__icontains=query)
        
        results = []
        for song in songs:
            results.append({
                'type': 'SONG',
                'title': song.title,
                'by': song.artist,
                'url': reverse('song_detail', args=[song.id])
            })
        for podcast in podcasts:
            results.append({
                'type': 'PODCAST',
                'title': podcast.title,
                'by': podcast.podcaster,
                'url': reverse('podcast_detail', args=[podcast.id])
            })
        for playlist in user_playlists:
            results.append({
                'type': 'USER PLAYLIST',
                'title': playlist.title,
                'by': playlist.user.username,
                'url': reverse('playlist_detail', args=[playlist.id])
            })
    else:
        results = []
    
    context = {
        'query': query,
        'results': results
    }
    return render(request, 'main/search_results.html', context)



def createpod(request):
    # Logika untuk menampilkan halaman createpod.html
    return render(request, 'createpod.html')


def createpodepisode(request):
    # Logika untuk menampilkan halaman createpod.html
    return render(request, 'createpod_episode.html')



def seechart(request):
    # Logika untuk menampilkan halaman createpod.html
    return render(request, 'seechart.html')

def daily(request):
    return render(request, 'daily.html')

def weekly(request):
    return render(request, 'weekly.html')

def monthly(request):
    return render(request, 'monthly.html')

def yearly(request):
    return render(request, 'yearly.html')


def podetail(request):
    return render(request, "podcastdetail.html")
def home(request):
    #redirect to login and register
    return redirect('main:login_and_register')

from django.shortcuts import render
from datetime import datetime, timedelta

def dashboard(request):
    user = query(f"SELECT * FROM akun WHERE email = 'sabdaps@zen.com'")[0]
    print(user)
    # Dummy data untuk pengguna
    user = {
        'name': user['nama'],
        'email': user['email'],
        'city': user['kota_asal'],
        'gender': user['gender'],
        'birth_place': user['tempat_lahir'],
        'birth_date': user['tanggal_lahir'],
        'role': 'Regular User',
        'playlists': [
            {
                'name': 'Favorite Songs',
                'song_count': 10,
                'created_at': '2023-04-01',
                'total_duration': '1:25:30'
            },
            {
                'name': 'Workout Playlist',
                'song_count': 15,
                'created_at': '2022-12-15',
                'total_duration': '2:10:45'
            },
            {
                'name': 'Chill Vibes',
                'song_count': 8,
                'created_at': '2023-03-20',
                'total_duration': '1:18:12'
            },
        ],
    }

    context = {
        'user': user,
        'user_type': 'user',
    }
    return render(request, 'dashboard.html', context)



main\__init__.py:



marmut\asgi.py:
"""
ASGI config for marmut project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "marmut.settings")

application = get_asgi_application()



marmut\settings.py:
"""
Django settings for marmut project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import environ # Tambahkan kode berikut
import os # Tambahkan kode berikut

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env() # Tambahkan kode berikut

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-5dgque*$6nl$6wj!p#7%6b=ot92+jm@f%!(*9-2tz!3=&n&+*w"

PRODUCTION = env.bool('PRODUCTION', False)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "main",
    "playlist",
    "langganan",
    "song",
    "royalty_management",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "marmut.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        'DIRS': [BASE_DIR / 'templates'],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "marmut.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

if PRODUCTION:
    DATABASES = {
        'default': env.db('DATABASE_URL')
    }
    DATABASES["default"]["ATOMIC_REQUESTS"] = True


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"



marmut\urls.py:
"""
URL configuration for marmut project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path("admin/", admin.site.urls),
    path('', include('main.urls')),
    path('playlist/', include('playlist.urls')),
    path('langganan/', include('langganan.urls')),
    path('song/', include('song.urls')),
    path('royalty_management/', include('royalty_management.urls')),
]



marmut\wsgi.py:
"""
WSGI config for marmut project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "marmut.settings")

application = get_wsgi_application()



marmut\__init__.py:



song\admin.py:
from django.contrib import admin

# Register your models here.



song\apps.py:
from django.apps import AppConfig


class SongConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'song'



song\models.py:
from django.db import models
from django.contrib.auth.models import User

class Song(models.Model):
    title = models.CharField(max_length=100)
    genre = models.CharField(max_length=100)
    artist = models.CharField(max_length=100)
    songwriter = models.CharField(max_length=100)
    duration = models.IntegerField()
    release_date = models.DateField()
    year = models.IntegerField()
    total_play = models.IntegerField(default=0)
    total_download = models.IntegerField(default=0)
    album = models.CharField(max_length=100)

    def __str__(self):
        return self.title

class AkunPlaySong(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    song = models.ForeignKey(Song, on_delete=models.CASCADE)
    timestamp = models.DateTimeField(auto_now_add=True)

class DownloadedSong(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    song = models.ForeignKey(Song, on_delete=models.CASCADE)
    timestamp = models.DateTimeField(auto_now_add=True)


song\tests.py:
from django.test import TestCase

# Create your tests here.



song\urls.py:
from django.urls import path
from . import views

urlpatterns = [
    path('', views.song_list, name='song_list'),
    path('<int:song_id>/', views.song_detail, name='song_detail'),
    path('<int:song_id>/play/', views.play_song, name='play_song'),
    path('<int:song_id>/add-to-playlist/', views.add_to_playlist, name='add_to_playlist'),
    path('<int:song_id>/download/', views.download_song, name='download_song'),
    path('downloaded/', views.downloaded_songs, name='downloaded_songs'),
    path('search/', views.search, name='search'),
]


song\views.py:
from django.shortcuts import render, redirect, get_object_or_404
from django.urls import reverse
from .models import Song, AkunPlaySong, DownloadedSong
from playlist.models import Playlist, UserPlaylist
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from django.utils import timezone

def song_list(request):
    songs = Song.objects.all()
    return render(request, 'song/song_list.html', {'songs': songs})

def song_detail(request, song_id):
    song = get_object_or_404(Song, id=song_id)
    is_premium = request.user.is_authenticated and request.user.is_premium
    return render(request, 'song/song_detail.html', {'song': song, 'is_premium': is_premium})

@login_required
def play_song(request, song_id):
    song = get_object_or_404(Song, id=song_id)
    progress = int(request.POST.get('progress', 0))
    if progress > 70:
        song.total_play += 1
        song.save()
        AkunPlaySong.objects.create(user=request.user, song=song)
    return JsonResponse({'status': 'success'})

@login_required
def add_to_playlist(request, song_id):
    song = get_object_or_404(Song, id=song_id)
    if request.method == 'POST':
        playlist_id = request.POST.get('playlist')
        playlist = get_object_or_404(Playlist, id=playlist_id, user=request.user)
        UserPlaylist.objects.create(playlist=playlist, song=song)
        return render(request, 'song/message.html', {
            'message': f"Berhasil menambahkan Lagu dengan judul '{song.title}' ke '{playlist.name}'!",
            'playlist_url': reverse('playlist_detail', args=[playlist.id]),
            'song_id': song.id,
        })
    playlists = Playlist.objects.filter(user=request.user)
    return render(request, 'song/add_to_playlist.html', {'song': song, 'playlists': playlists})

@login_required
def download_song(request, song_id):
    song = get_object_or_404(Song, id=song_id)
    if request.user.is_premium:
        song.total_download += 1
        song.save()
        DownloadedSong.objects.create(user=request.user, song=song)
        return render(request, 'song/message.html', {
            'message': f"Berhasil mengunduh Lagu dengan judul '{song.title}'!",
            'playlist_url': reverse('downloaded_songs'),
            'song_id': song.id,
        })
    return redirect('song_detail', song_id=song.id)

@login_required
def downloaded_songs(request):
    songs = DownloadedSong.objects.filter(user=request.user).order_by('-timestamp')
    return render(request, 'song/downloaded_songs.html', {'songs': songs})

def search(request):
    query = request.GET.get('query')
    
    if query:
        songs = Song.objects.filter(title__icontains=query)
        podcasts = podcast.objects.filter(title__icontains=query)
        user_playlists = UserPlaylist.objects.filter(title__icontains=query)
        
        results = []
        for song in songs:
            results.append({
                'type': 'SONG',
                'title': song.title,
                'by': song.artist,
                'url': reverse('song_detail', args=[song.id])
            })
        for podcast in podcasts:
            results.append({
                'type': 'PODCAST',
                'title': podcast.title,
                'by': podcast.podcaster,
                'url': reverse('podcast_detail', args=[podcast.id])
            })
        for playlist in user_playlists:
            results.append({
                'type': 'USER PLAYLIST',
                'title': playlist.title,
                'by': playlist.user.username,
                'url': reverse('playlist_detail', args=[playlist.id])
            })
    else:
        results = []
    
    context = {
        'query': query,
        'results': results
    }
    return render(request, 'main/search_results.html', context)


song\__init__.py:



templates\base.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Marmut</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body, .form-label, .btn {
            background-color: #121212; /* Dark background for the body */
            color: #fff; /* White text for readability */
        }
        h2 {
            color: #fff; /* White text for headings */
        }
        .form-box {
            background-color: #333; /* Darker box for form */
            padding: 20px;
            border-radius: 8px;
            border: 1px solid #444; /* Subtle border for the form */
            box-shadow: 0 4px 8px rgba(0,0,0,0.5); /* Adding some shadow for depth */
        }
        .btn-pink {
            background-color: #ff007f; /* Pink color for the button */
            border-color: #ff007f;
        }
        .btn-pink:hover {
            background-color: #e60074;
            border-color: #cc0066;
        }
        .btn-cyan {
            background-color: #00ffff; /* Cyan color for the button */
            border-color: #00ffff;
        }
        .btn-cyan:hover {
            background-color: #00e5e5;
            border-color: #00cccc;
        }
        .form-control {
            background-color: #222; /* Darker background for inputs */
            border: 1px solid #555; /* Dark border for inputs */
            color: #fff; /* White text for inputs */
        }
        .form-control:focus {
            box-shadow: 0 0 0 0.25rem rgba(0, 255, 255, 0.25); /* Cyan glow for focus */
            border-color: #00ffff; /* Cyan border for focus */
        }
    </style>
</head>
<body>
    {% include 'navbar_user.html' %}
    

    <div class="container mt-4">
        {% block content %}{% endblock %}
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>




templates\navbar_guest.html:
<nav class="navbar navbar-expand-md navbar-dark bg-dark-custom">
    <div class="container-fluid">
        <a class="navbar-brand" href="#">Marmut</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse" aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarCollapse">
            <ul class="navbar-nav me-auto mb-2 mb-md-0">
                <li class="nav-item">
                    <a class="nav-link active" aria-current="page" href="#">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Pricing</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'playlist_list' %}">Kelola Playlist</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'langganan_paket' %}">Langganan Paket</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'song_list' %}">Daftar Lagu</a>
                </li>
            </ul>
            <form class="d-flex">
                <a href="{% url 'main:login' %}" class="btn btn-pink me-2" type="submit">Login</a>
                <a href="{% url 'main:register' %}" class="btn btn-cyan" type="submit">Register</a>
            </form>
        </div>
    </div>
</nav>


templates\navbar_user.html:
<nav class="navbar navbar-expand-md navbar-dark bg-dark-custom">
    <div class="container-fluid">
        <a class="navbar-brand" href="{% url 'main:home' %}">Mahmud</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse" aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarCollapse">
            <ul class="navbar-nav me-auto mb-2 mb-md-0">
                {% if user_type != 'guest' %}
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'main:dashboard' %}">Dashboard</a>
                    </li>
                    {% if user_type == 'user' or user_type == 'artist' or user_type == 'songwriter' or user_type == 'podcaster' %}
                        <li class="nav-item">
                            <a class="nav-link" href="#">Chart</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">Search Bar</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">Kelola Playlist</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">Langganan Paket</a>
                        </li>
                    {% endif %}
                    {% if user_type == 'premium' %}
                        <li class="nav-item">
                            <a class="nav-link" href="#">Kelola Downloaded Songs</a>
                        </li>
                    {% endif %}
                    {% if user_type == 'podcaster' %}
                        <li class="nav-item">
                            <a class="nav-link" href="#">Kelola Podcast</a>
                        </li>
                    {% endif %}
                    {% if user_type == 'artist' or user_type == 'songwriter' %}
                        <li class="nav-item">
                            <a class="nav-link" href="#">Kelola Album & Songs</a>
                        </li>
                    {% endif %}
                    {% if user_type == 'label' %}
                        <li class="nav-item">
                            <a class="nav-link" href="#">Kelola Album</a>
                        </li>
                    {% endif %}
                    {% if user_type == 'artist' or user_type == 'songwriter' or user_type == 'label' %}
                        <li class="nav-item">
                            <a class="nav-link" href="#">Cek Royalti</a>
                        </li>
                    {% endif %}
                    <li class="nav-item">
                        <a class="nav-link" href="{% url 'main:logout' %}">Logout</a>
                    </li>
                {% else %}
                    <li class="nav-item">
                        <a class="nav-link active" href="{% url 'main:home' %}">Home</a>
                    </li>
                {% endif %}
            </ul>
            {% if user_type == 'guest' %}
                <form class="d-flex">
                    <button class="btn btn-pink me-2" type="button" onclick="location.href='{% url 'main:login' %}'">Login</button>
                    <button class="btn btn-cyan" type="button" onclick="location.href='{% url 'main:register' %}'">Register</button>
                </form>
            {% endif %}
        </div>
    </div>
</nav>



templates\search_results.html:
{% extends 'base.html' %}

{% block content %}
<h2>Hasil Pencarian "{{ query }}"</h2>

{% if results %}
    <table class="table table-dark">
        <thead>
            <tr>
                <th>Tipe</th>
                <th>Judul</th>
                <th>Oleh</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for result in results %}
                <tr>
                    <td>{{ result.type }}</td>
                    <td>{{ result.title }}</td>
                    <td>{{ result.by }}</td>
                    <td>
                        <a href="{{ result.url }}" class="btn btn-sm btn-info">Lihat</a>
                    </td>
                </tr>
            {% endfor %}
        </tbody>
    </table>
{% else %}
    <p>Maaf, pencarian untuk "{{ query }}" tidak ditemukan</p>
{% endif %}
{% endblock %}


song\admin.py:
from django.contrib import admin

# Register your models here.



song\apps.py:
from django.apps import AppConfig


class SongConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'song'



song\models.py:
from django.db import models
from django.contrib.auth.models import User

class Song(models.Model):
    title = models.CharField(max_length=100)
    genre = models.CharField(max_length=100)
    artist = models.CharField(max_length=100)
    songwriter = models.CharField(max_length=100)
    duration = models.IntegerField()
    release_date = models.DateField()
    year = models.IntegerField()
    total_play = models.IntegerField(default=0)
    total_download = models.IntegerField(default=0)
    album = models.CharField(max_length=100)

    def __str__(self):
        return self.title

class AkunPlaySong(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    song = models.ForeignKey(Song, on_delete=models.CASCADE)
    timestamp = models.DateTimeField(auto_now_add=True)

class DownloadedSong(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    song = models.ForeignKey(Song, on_delete=models.CASCADE)
    timestamp = models.DateTimeField(auto_now_add=True)


song\tests.py:
from django.test import TestCase

# Create your tests here.



song\urls.py:
from django.urls import path
from . import views

urlpatterns = [
    path('', views.song_list, name='song_list'),
    path('<int:song_id>/', views.song_detail, name='song_detail'),
    path('<int:song_id>/play/', views.play_song, name='play_song'),
    path('<int:song_id>/add-to-playlist/', views.add_to_playlist, name='add_to_playlist'),
    path('<int:song_id>/download/', views.download_song, name='download_song'),
    path('downloaded/', views.downloaded_songs, name='downloaded_songs'),
    path('search/', views.search, name='search'),
]


song\views.py:
from django.shortcuts import render, redirect, get_object_or_404
from django.urls import reverse
from .models import Song, AkunPlaySong, DownloadedSong
from playlist.models import Playlist, UserPlaylist
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from django.utils import timezone

def song_list(request):
    songs = Song.objects.all()
    return render(request, 'song/song_list.html', {'songs': songs})

def song_detail(request, song_id):
    song = get_object_or_404(Song, id=song_id)
    is_premium = request.user.is_authenticated and request.user.is_premium
    return render(request, 'song/song_detail.html', {'song': song, 'is_premium': is_premium})

@login_required
def play_song(request, song_id):
    song = get_object_or_404(Song, id=song_id)
    progress = int(request.POST.get('progress', 0))
    if progress > 70:
        song.total_play += 1
        song.save()
        AkunPlaySong.objects.create(user=request.user, song=song)
    return JsonResponse({'status': 'success'})

@login_required
def add_to_playlist(request, song_id):
    song = get_object_or_404(Song, id=song_id)
    if request.method == 'POST':
        playlist_id = request.POST.get('playlist')
        playlist = get_object_or_404(Playlist, id=playlist_id, user=request.user)
        UserPlaylist.objects.create(playlist=playlist, song=song)
        return render(request, 'song/message.html', {
            'message': f"Berhasil menambahkan Lagu dengan judul '{song.title}' ke '{playlist.name}'!",
            'playlist_url': reverse('playlist_detail', args=[playlist.id]),
            'song_id': song.id,
        })
    playlists = Playlist.objects.filter(user=request.user)
    return render(request, 'song/add_to_playlist.html', {'song': song, 'playlists': playlists})

@login_required
def download_song(request, song_id):
    song = get_object_or_404(Song, id=song_id)
    if request.user.is_premium:
        song.total_download += 1
        song.save()
        DownloadedSong.objects.create(user=request.user, song=song)
        return render(request, 'song/message.html', {
            'message': f"Berhasil mengunduh Lagu dengan judul '{song.title}'!",
            'playlist_url': reverse('downloaded_songs'),
            'song_id': song.id,
        })
    return redirect('song_detail', song_id=song.id)

@login_required
def downloaded_songs(request):
    songs = DownloadedSong.objects.filter(user=request.user).order_by('-timestamp')
    return render(request, 'song/downloaded_songs.html', {'songs': songs})

def search(request):
    query = request.GET.get('query')
    
    if query:
        songs = Song.objects.filter(title__icontains=query)
        podcasts = podcast.objects.filter(title__icontains=query)
        user_playlists = UserPlaylist.objects.filter(title__icontains=query)
        
        results = []
        for song in songs:
            results.append({
                'type': 'SONG',
                'title': song.title,
                'by': song.artist,
                'url': reverse('song_detail', args=[song.id])
            })
        for podcast in podcasts:
            results.append({
                'type': 'PODCAST',
                'title': podcast.title,
                'by': podcast.podcaster,
                'url': reverse('podcast_detail', args=[podcast.id])
            })
        for playlist in user_playlists:
            results.append({
                'type': 'USER PLAYLIST',
                'title': playlist.title,
                'by': playlist.user.username,
                'url': reverse('playlist_detail', args=[playlist.id])
            })
    else:
        results = []
    
    context = {
        'query': query,
        'results': results
    }
    return render(request, 'main/search_results.html', context)


song\__init__.py:



song\templates\song\song_detail.html:
{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h2>Song Detail</h2>
    <p>Judul: {{ song.title }}</p>
    <p>Genre(s):
        {% for genre in song.genre.split(',') %}
            <span class="badge bg-secondary">{{ genre }}</span>
        {% endfor %}
    </p>
    <p>Artist: {{ song.artist }}</p>
    <p>Songwriter(s):
        {% for songwriter in song.songwriter.split(',') %}
            <span class="badge bg-secondary">{{ songwriter }}</span>
        {% endfor %}
    </p>
    <p>Durasi: {{ song.duration }} menit</p>
    <p>Tanggal Rilis: {{ song.release_date|date:"d/m/y" }}</p>
    <p>Tahun: {{ song.year }}</p>
    <p>Total Play: {{ song.total_play }}</p>
    <p>Total Downloads: {{ song.total_download }}</p>
    <p>Album: {{ song.album }}</p>

    <form id="play-form" method="post" action="{% url 'play_song' song.id %}">
        {% csrf_token %}
        <input type="range" id="progress" name="progress" min="0" max="100" value="0">
        <button type="submit" class="btn btn-primary">Play</button>
    </form>

    <a href="{% url 'add_to_playlist' song.id %}" class="btn btn-success">Add to Playlist</a>

    {% if is_premium %}
        <a href="{% url 'download_song' song.id %}" class="btn btn-info">Download</a>
    {% endif %}

    <a href="{% url 'song_list' %}" class="btn btn-secondary">Kembali</a>
</div>
{% endblock %}


song\templates\song\song_list.html:
{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h2>Daftar Lagu</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Judul</th>
                <th>Artist</th>
                <th>Album</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            {% for song in songs %}
                <tr>
                    <td>{{ song.title }}</td>
                    <td>{{ song.artist }}</td>
                    <td>{{ song.album }}</td>
                    <td>
                        <a href="{% url 'song_detail' song.id %}" class="btn btn-info btn-sm">Lihat</a>
                    </td>
                </tr>
            {% endfor %}
        </tbody>
    </table>
</div>
{% endblock %}


song\templates\song\downloaded_songs.html:
{% extends 'base.html' %}

{% block content %}
<div class="container">
    <h2>Daftar Lagu yang Diunduh</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Judul</th>
                <th>Artist</th>
                <th>Album</th>
                <th>Tanggal Unduh</th>
            </tr>
        </thead>
        <tbody>
            {% for song in songs %}
                <tr>
                    <td>{{ song.song.title }}</td>
                    <td>{{ song.song.artist }}</td>
                    <td>{{ song.song.album }}</td>
                    <td>{{ song.timestamp|date:"d/m/y H:i" }}</td>
                </tr>
            {% endfor %}
        </tbody>
    </table>
    <a href="{% url 'song_list' %}" class="btn btn-secondary">Kembali</a>
</div>
{% endblock %}


